declare module calcium.storage.util {
    class Queue {
        private tasks;
        private results;
        constructor();
        public Add(param: any, action: (queue: Queue, param: any, callback: (result: any) => void) => void): void;
        public Process(callback: (results: any) => void): void;
    }
}
declare module calcium.storage.util {
    class Path {
        static Normalize(path: string): string;
        static Join(paths: any): string;
        static Tokenize(path: string): any;
        static Name(path: string): string;
        static Parent(path: string): string;
        static TrimBase(path: string): string;
        static IsAbsoluteUrl(path: string): boolean;
        static IsAbsoluteUrn(path: string): boolean;
        static RemoveBasePath(basePath: string, path: string): string;
    }
}
declare module calcium.storage.util {
    class Mime {
        static fromfilename(filename: string): string;
        static fromext(extension: string): string;
    }
}
declare module calcium.storage.amazon {
    class Region {
        static US_EAST_1: string;
        static US_WEST_1: string;
        static EU_WEST_1: string;
        static AP_SOUTHEAST_1: string;
        static AP_SOUTHEAST_2: string;
        static AP_NORTHEAST_1: string;
        static SA_EAST_1: string;
    }
    class Connection {
        public accesskey: string;
        public secretkey: string;
        public region: string;
        public bucketname: string;
        public basepath: string;
        constructor(accesskey: string, secretkey: string, region: string, bucketname: string, basepath: string);
    }
}
declare module calcium.storage.ftp {
    class Connection {
        public host: string;
        public port: number;
        public user: string;
        public pass: string;
        public basepath: string;
        constructor(host: string, port: number, user: string, pass: string, basepath: string);
    }
}


declare module calcium.storage.ftp {
    class Credential {
        public user: string;
        public pass: string;
        constructor(user: string, pass: string);
    }
    class EndPoint {
        public host: string;
        public port: number;
        constructor(host: string, port: number);
    }
    class Response {
        public code: number;
        public messages: any;
        constructor();
    }
    class Client {
        public endpoint: EndPoint;
        public credential: Credential;
        public logger: calcium.logging.ILogger;
        private socket;
        private responses;
        private response_buffer;
        private callbacks;
        constructor(endpoint: EndPoint, credential: Credential, logger: calcium.logging.ILogger);
        public connect(callback: (response: Response) => void): void;
        public login(callback: (response: Response) => void): void;
        public disconnect(callback: (response: Response) => void): void;
        public command(request: string, callback: (response: Response) => void): void;
        public wait(callback: (response: Response) => void): void;
        public passive(pasv_response: Response, callback: (stream: stream.ReadableStream) => void): void;
        private accept();
    }
}
declare module calcium.storage.google {
    class Connection {
        constructor();
    }
}
declare module calcium.storage.local {
    class Connection {
        public basepath: string;
        constructor(basepath: string);
    }
}

declare module calcium.storage {
    class DeviceObject {
        public type: string;
        public fullpath: string;
        public name: string;
        public mime: string;
        public url: string;
        public timestamp: Date;
        public size: number;
        public metadata: any;
    }
    interface IDevice {
        exists(path: string, callback: (exists: boolean) => void): void;
        createfolder(path: string, callback: (success: boolean) => void): void;
        readfolder(path: string, callback: (objects: any) => void): void;
        delete(path: string, callback: (success: boolean) => void): void;
        readstream(path: string, callback: (stream: stream.ReadableStream) => void): void;
        writestream(path: string, callback: (stream: stream.WritableStream) => void): void;
    }
}


declare module calcium {
    var logging: logging;
}





declare module calcium.storage.ftp {
    class Device implements storage.IDevice {
        private connection;
        private logger;
        constructor(connection: ftp.Connection, logger?: calcium.logging.ILogger);
        public exists(path: string, callback: (exists: boolean) => void): void;
        public createfolder(path: string, callback: (success: boolean) => void): void;
        public delete(path: string, callback: (success: boolean) => void): void;
        public readfolder(path: string, callback: (objects: any) => void): void;
        public readstream(path: string, callback: (stream: any) => void): void;
        public writestream(path: string, callback: (stream: any) => void): void;
        private getclient();
        private getstreamdata(stream, callback);
        private readdeviceobjects(path, data);
        private readdeviceobject(path, line);
    }
}



declare module calcium.storage.google {
    class Device implements storage.IDevice {
        private connection;
        constructor(connection: google.Connection);
        public exists(path: string, callback: (exists: boolean) => void): void;
        public createfolder(path: string, callback: (success: boolean) => void): void;
        public delete(path: string, callback: (success: boolean) => void): void;
        public readfolder(path: string, callback: (objects: any) => void): void;
        public readstream(path: string, callback: (stream: any) => void): void;
        public writestream(path: string, callback: (stream: any) => void): void;
    }
}





declare module calcium.storage.local {
    class Device implements storage.IDevice {
        private connection;
        private logger;
        constructor(connection: local.Connection, logger?: calcium.logging.ILogger);
        public exists(path: string, callback: (exists: boolean) => void): void;
        public createfolder(path: string, callback: (success: boolean) => void): void;
        public delete(path: string, callback: (success: boolean) => void): void;
        public readfolder(path: string, callback: (objects: any) => void): void;
        public readstream(path: string, callback: (stream: stream.ReadableStream) => void): void;
        public writestream(path: string, callback: (stream: stream.WritableStream) => void): void;
    }
}


declare module calcium.storage.mount {
    class Device implements storage.IDevice {
        private devices;
        constructor();
        public push(logicalName: string, device: storage.IDevice): void;
        public exists(path: string, callback: (exists: boolean) => void): void;
        public createfolder(path: string, callback: (success: boolean) => void): void;
        public delete(path: string, callback: (success: boolean) => void): void;
        public readfolder(path: string, callback: (objects: any) => void): void;
        public readstream(path: string, callback: (stream: stream.ReadableStream) => void): void;
        public writestream(path: string, callback: (stream: stream.WritableStream) => void): void;
        private GetDevicePath(path);
        private GetDevice(path);
    }
}





declare module calcium.storage.amazon {
    class Device implements storage.IDevice {
        private connection;
        private logger;
        private s3;
        constructor(connection: amazon.Connection, logger?: calcium.logging.ILogger);
        public exists(path: string, callback: (exists: boolean) => void): void;
        public createfolder(path: string, callback: (success: boolean) => void): void;
        public delete(path: string, callback: (success: boolean) => void): void;
        public readfolder(path: string, callback: (objects: any) => void): void;
        public readstream(path: string, callback: (stream: any) => void): void;
        public writestream(path: string, callback: (stream: any) => void): void;
        private convert_folder_path(path);
        private convert_file_path(path);
    }
}









