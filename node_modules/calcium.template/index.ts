/// <reference path="decl/references.ts" />

module calcium.template 
{
    var overrides = <any>razor;
    
    overrides.findView = function (viewName:string, cb) 
    {
        storage.readstream(viewName, (readstream) => {
            
            unpack(readstream, (content:string) => {
                
                cb(content);
            });

        });
    };

    overrides.getViewEtag = function(viewName)
    { 
        return viewName;
    };
    
    function unpack(readstream:stream.ReadableStream, callback: (content:string) => void ) : void  {
    
        var buffer = [];
    
        readstream.setEncoding('utf8');
    
        readstream.on("data", (chunk:string)=> { buffer.push(chunk); });
    
        readstream.on("end",  () => { callback(buffer.join('')); });            
    }

    export var storage:calcium.storage.Storage = new calcium.storage.mount.Device();

    export function render(path:string, model:any, callback:(content:string) => void ) : void {

        storage.readstream(path, (readstream) => {

            if(!readstream) {
            
                callback('cannot locate template: ' + path);

                return;
            }

            unpack(readstream, (content:string) => {
                try
                {
                    var template = <any>razor.compile(content, null);
                
                    template(model, null, (content) =>{

                        callback(content);
                    });
                }
                catch(e)
                {
                    callback('error: ' + e.toString());

                    return;                    
                }
            });
        });
    }
}

// export.
declare var exports;

exports = calcium.template;
