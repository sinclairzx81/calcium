var _vm = require("vm");
var _fs = require("fs");
var _path = require("path");

exports.allowRemote = false;

exports.debug = false;

exports.compiler;

function check(units) {
    for (var n in units) {
        if (units[n].hasError()) {
            return false;
        }
    }

    return true;
}
exports.check = check;

function register() {
    require.extensions['.ts'] = function (_module) {
        var output_diagnostics = function (units) {
            for (var n in units) {
                for (var m in units[n].diagnostics) {
                    console.log(_path.basename(units[n].path) + ':' + units[n].diagnostics[m].toString());
                }
            }
        };

        var api = load_typescript_api();

        var io = new api.IO.IOSync();

        var logger = new api.Loggers.BufferedLogger();

        var resolver = new api.Resolve.Resolver(io, logger);

        var diagnostics = [];

        resolver.resolve([_module.filename], function (sourceUnits) {
            if (exports.check(sourceUnits)) {
                var compiler = new api.Compile.Compiler(logger);

                compiler.compile(sourceUnits, function (compiledUnits) {
                    if (exports.check(compiledUnits)) {
                        exports.run(compiledUnits, null, function (context) {
                            _module.exports = context;
                        });
                    } else {
                        output_diagnostics(compiledUnits);
                    }
                });
            } else {
                output_diagnostics(sourceUnits);
            }
        });
    };
}
exports.register = register;

function create(path, content) {
    var api = load_typescript_api();

    return new api.Units.SourceUnit(path, content, [], false);
}
exports.create = create;

function resolve(sources, callback) {
    var getType = function (obj) {
        return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };

    var _sources = [];

    switch (getType(sources)) {
        case "string":
            _sources.push(sources);

            break;

        case "array":
            _sources = sources;

            break;
    }

    var api = load_typescript_api();

    var io = new api.IO.IOAsync();

    var logger = new api.Loggers.NullLogger();

    if (exports.allowRemote) {
        io = new api.IO.IORemoteAsync();
    }

    if (exports.debug) {
        logger = new api.Loggers.ConsoleLogger();
    }

    var resolver = new api.Resolve.Resolver(io, logger);

    resolver.resolve(_sources, callback);
}
exports.resolve = resolve;

function sort(sourceUnits) {
    var api = load_typescript_api();

    return api.Resolve.Topology.sort(sourceUnits);
}
exports.sort = sort;

function graph(sourceUnits) {
    var api = load_typescript_api();

    return api.Resolve.Topology.graph(sourceUnits);
}
exports.graph = graph;

function compile(sourceUnits, callback) {
    var api = load_typescript_api();

    var logger = new api.Loggers.NullLogger();

    if (exports.debug) {
        logger = new api.Loggers.ConsoleLogger();
    }

    if (!exports.compiler) {
        exports.compiler = new api.Compile.Compiler(logger);
    }
    exports.compiler.compile(sourceUnits, callback);
}
exports.compile = compile;

function reset() {
    var api = load_typescript_api();

    var logger = new api.Loggers.NullLogger();

    exports.compiler = new api.Compile.Compiler(logger);
}
exports.reset = reset;

function reflect(compiledUnits, callback) {
    var api = load_typescript_api();

    var reflection = new api.Reflect.Reflection();

    for (var n in compiledUnits) {
        var script = api.Reflect.Script.create(compiledUnits[n].path, compiledUnits[n].ast);

        reflection.scripts.push(script);
    }

    callback(reflection);
}
exports.reflect = reflect;

function run(compiledUnits, sandbox, callback) {
    try  {
        if (!sandbox) {
            sandbox = get_default_sandbox();
        }

        var sources = [];

        for (var n in compiledUnits) {
            sources.push(compiledUnits[n].content);
        }

        var script = _vm.createScript(sources.join(''), "typescript-compilation.js");

        script.runInNewContext(sandbox);

        callback(sandbox.exports);
    } catch (e) {
        callback(null);

        console.log(e);
    }
}
exports.run = run;

function build(filenames, callback) {
    var get_diagnostics = function (sourceUnits) {
        var result = [];

        for (var n in sourceUnits) {
            for (var m in sourceUnits[n].diagnostics) {
                result.push(sourceUnits[n].diagnostics[m]);
            }
        }

        return result;
    };

    exports.resolve(filenames, function (sourceUnits) {
        if (!exports.check(sourceUnits)) {
            callback(get_diagnostics(sourceUnits), null, null);

            return;
        }

        exports.compile(sourceUnits, function (compiledUnits) {
            if (!exports.check(sourceUnits)) {
                callback(get_diagnostics(sourceUnits), null, null);

                return;
            }

            var source_buffer = [];

            for (var n in compiledUnits) {
                var pattern = /\/\/\/ <reference path="(.*?)" \/>/g;

                var content = compiledUnits[n].content.replace(pattern, '');

                source_buffer.push(content + '\n\n');
            }

            var declaration_buffer = [];

            for (var n in compiledUnits) {
                var pattern = /\/\/\/ <reference path="(.*?)" \/>/g;

                var content = compiledUnits[n].declaration.replace(pattern, '');

                declaration_buffer.push(content + '\n\n');
            }

            callback(null, source_buffer.join(''), declaration_buffer.join(''));
        });
    });
}
exports.build = build;

function get_default_sandbox() {
    var sandbox = {};

    if (!sandbox) {
        sandbox = {};

        for (var n in global) {
            sandbox[n] = global[n];
        }
    }

    sandbox.require = require;

    sandbox.process = process;

    sandbox.console = console;

    sandbox.global = global;

    sandbox.__dirname = _path.dirname(process.mainModule.filename);

    sandbox.__filename = _path.join(sandbox.__dirname, "typescript-compilation.js");

    sandbox.exports = {};

    return sandbox;
}

var cache = {};

var typescript_filename = _path.join(__dirname, "typescript.js");

var typescript_api_filename = _path.join(__dirname, "typescript.api.js");

function load_typescript_api() {
    if (cache.typescript_api) {
        return cache.typescript_api;
    }

    var sandbox = {
        TypeScript: load_typescript(),
        __filename: __filename,
        __dirname: __dirname,
        global: global,
        process: process,
        require: require,
        console: console,
        exports: null
    };

    cache.typescript_api = load_module(typescript_api_filename, sandbox, ["TypeScript"]).Api;

    return cache.typescript_api;
}

function load_typescript() {
    if (cache.typescript) {
        return cache.typescript;
    }
    var sandbox = {
        exports: null
    };

    cache.typescript = load_module(typescript_filename, sandbox, ["TypeScript"]);

    return cache.typescript;
}

function load_module(filename, sandbox, export_type_names) {
    var source = _fs.readFileSync(filename, 'utf8');

    for (var n in export_type_names) {
        source = source.concat('\n\nexports = ' + export_type_names[n] + ';');
    }

    var script = _vm.createScript(source, _path.basename(filename));

    script.runInNewContext(sandbox);

    return sandbox.exports;
}

