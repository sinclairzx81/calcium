var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var IOFileError = (function () {
                function IOFileError(text, message) {
                    this.text = text;
                    this.message = message;
                }
                return IOFileError;
            })();
            IO.IOFileError = IOFileError;

            var IOFile = (function () {
                function IOFile(path, content, errors, remote) {
                    this.path = path;
                    this.content = content;
                    this.errors = errors;
                    this.remote = remote;
                }
                return IOFile;
            })();
            IO.IOFile = IOFile;
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var Buffer = (function () {
                function Buffer() {
                }
                Buffer.process = function (buffer) {
                    switch (buffer[0]) {
                        case 0xFE:
                            if (buffer[1] == 0xFF) {
                                var i = 0;

                                while ((i + 1) < buffer.length) {
                                    var temp = buffer[i];

                                    buffer[i] = buffer[i + 1];

                                    buffer[i + 1] = temp;

                                    i += 2;
                                }

                                return buffer.toString("ucs2", 2);
                            }

                            break;
                        case 0xFF:
                            if (buffer[1] == 0xFE) {
                                return buffer.toString("ucs2", 2);
                            }

                            break;

                        case 0xEF:
                            if (buffer[1] == 0xBB) {
                                return buffer.toString("utf8", 3);
                            }
                    }

                    return buffer.toString();
                };
                return Buffer;
            })();
            IO.Buffer = Buffer;
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var _fs = require('fs');

            var IOSync = (function () {
                function IOSync() {
                }
                IOSync.prototype.readFile = function (path, callback) {
                    try  {
                        var data = _fs.readFileSync(path);

                        callback(new TypeScript.Api.IO.IOFile(path, TypeScript.Api.IO.Buffer.process(data), [], false));
                    } catch (exception) {
                        var text = "could not resolve source unit.";

                        var message = "could not resolve source unit " + path + ".";

                        var error = new TypeScript.Api.IO.IOFileError(text, message);

                        callback(new TypeScript.Api.IO.IOFile(path, null, [error], false));
                    }
                };
                return IOSync;
            })();
            IO.IOSync = IOSync;
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var _fs = require('fs');

            var IOAsync = (function () {
                function IOAsync() {
                }
                IOAsync.prototype.readFile = function (path, callback) {
                    _fs.readFile(path, function (error, data) {
                        if (error) {
                            var text = "could not resolve source unit.";

                            var message = "could not resolve source unit " + path + ".";

                            var error = new TypeScript.Api.IO.IOFileError(text, message);

                            callback(new TypeScript.Api.IO.IOFile(path, null, [error], false));
                        } else {
                            callback(new TypeScript.Api.IO.IOFile(path, TypeScript.Api.IO.Buffer.process(data), [], false));
                        }
                    });
                };
                return IOAsync;
            })();
            IO.IOAsync = IOAsync;
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var _fs = require('fs');

            var _url = require('url');

            var _http = require('http');

            var _https = require('https');

            var IORemoteAsync = (function () {
                function IORemoteAsync() {
                }
                IORemoteAsync.prototype.readFile = function (path, callback) {
                    if (this.isUrl(path)) {
                        this.readFileFromHttp(path, callback);

                        return;
                    }

                    this.readFileFromDisk(path, callback);
                };

                IORemoteAsync.prototype.readFileFromDisk = function (path, callback) {
                    _fs.readFile(path, function (error, data) {
                        if (error) {
                            var text = "could not resolve source unit.";

                            var message = "could not resolve source unit " + path + ".";

                            var error = new TypeScript.Api.IO.IOFileError(text, message);

                            callback(new TypeScript.Api.IO.IOFile(path, null, [error], false));
                        } else {
                            callback(new TypeScript.Api.IO.IOFile(path, TypeScript.Api.IO.Buffer.process(data), [], false));
                        }
                    });
                };

                IORemoteAsync.prototype.readFileFromHttp = function (path, callback) {
                    var url = _url.parse(path);

                    var protocol = _http;

                    var options = { host: url.host, port: url.port, path: url.path, method: 'GET' };

                    if (this.isHTTPS(path)) {
                        protocol = _https;

                        options.port = 443;
                    }

                    var request = protocol.request(options, function (response) {
                        var data = [];

                        response.on('data', function (chunk) {
                            data.push(chunk);
                        });

                        response.on('end', function () {
                            callback(new TypeScript.Api.IO.IOFile(path, TypeScript.Api.IO.Buffer.process(data.join('')), [], true));
                        });
                    });

                    request.on('error', function (error) {
                        var text = "could not resolve source unit.";

                        var message = "could not resolve source unit " + path + ".";

                        var error = new TypeScript.Api.IO.IOFileError(text, message);

                        callback(new TypeScript.Api.IO.IOFile(path, null, [error], true));
                    });

                    request.end();
                };

                IORemoteAsync.prototype.isHTTPS = function (path) {
                    if (path.indexOf('https://') == 0) {
                        return true;
                    }

                    return false;
                };

                IORemoteAsync.prototype.isUrl = function (path) {
                    var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

                    return regex.test(path);
                };
                return IORemoteAsync;
            })();
            IO.IORemoteAsync = IORemoteAsync;
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Loggers) {
            var NullLogger = (function () {
                function NullLogger() {
                }
                NullLogger.prototype.information = function () {
                    return false;
                };

                NullLogger.prototype.debug = function () {
                    return false;
                };

                NullLogger.prototype.warning = function () {
                    return false;
                };

                NullLogger.prototype.error = function () {
                    return false;
                };

                NullLogger.prototype.fatal = function () {
                    return false;
                };

                NullLogger.prototype.log = function (s) {
                };
                return NullLogger;
            })();
            Loggers.NullLogger = NullLogger;
        })(Api.Loggers || (Api.Loggers = {}));
        var Loggers = Api.Loggers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Loggers) {
            var ConsoleLogger = (function () {
                function ConsoleLogger() {
                }
                ConsoleLogger.prototype.information = function () {
                    return false;
                };

                ConsoleLogger.prototype.debug = function () {
                    return false;
                };

                ConsoleLogger.prototype.warning = function () {
                    return false;
                };

                ConsoleLogger.prototype.error = function () {
                    return false;
                };

                ConsoleLogger.prototype.fatal = function () {
                    return false;
                };

                ConsoleLogger.prototype.log = function (s) {
                    console.log(s);
                };
                return ConsoleLogger;
            })();
            Loggers.ConsoleLogger = ConsoleLogger;
        })(Api.Loggers || (Api.Loggers = {}));
        var Loggers = Api.Loggers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Writers) {
            var TextWriter = (function () {
                function TextWriter() {
                    this.buffer = [];
                    this.temp = "";
                }
                TextWriter.prototype.Write = function (text) {
                    this.temp += text;
                };

                TextWriter.prototype.WriteLine = function (text) {
                    this.buffer.push(this.temp + text);

                    this.temp = "";
                };

                TextWriter.prototype.Close = function () {
                    if (this.temp.length > 0) {
                        this.buffer.push(this.temp);
                    }

                    this.temp = "";
                };

                TextWriter.prototype.toString = function () {
                    return this.buffer.join('\n');
                };
                return TextWriter;
            })();
            Writers.TextWriter = TextWriter;
        })(Api.Writers || (Api.Writers = {}));
        var Writers = Api.Writers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Loggers) {
            var BufferedLogger = (function () {
                function BufferedLogger() {
                    this.writer = new TypeScript.Api.Writers.TextWriter();
                }
                BufferedLogger.prototype.information = function () {
                    return false;
                };

                BufferedLogger.prototype.debug = function () {
                    return false;
                };

                BufferedLogger.prototype.warning = function () {
                    return false;
                };

                BufferedLogger.prototype.error = function () {
                    return false;
                };

                BufferedLogger.prototype.fatal = function () {
                    return false;
                };

                BufferedLogger.prototype.log = function (s) {
                    this.writer.WriteLine(s);
                };

                BufferedLogger.prototype.toString = function () {
                    return this.writer.toString();
                };
                return BufferedLogger;
            })();
            Loggers.BufferedLogger = BufferedLogger;
        })(Api.Loggers || (Api.Loggers = {}));
        var Loggers = Api.Loggers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Util) {
            var _path = require("path");

            var Path = (function () {
                function Path() {
                }
                Path.isAbsoluteUrl = function (path) {
                    var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

                    return regex.test(path);
                };

                Path.isAbsoluteUrn = function (path) {
                    var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");

                    return regex.test(path);
                };

                Path.isRootRelative = function (path) {
                    return path.indexOf('/') == 0 && path.indexOf('//') != 0;
                };

                Path.isRelative = function (path) {
                    if (!Path.isAbsoluteUrl(path)) {
                        if (!Path.isAbsoluteUrn(path)) {
                            if (!(path.indexOf('/') == 0)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };

                Path.toForwardSlashes = function (path) {
                    return path.replace(/\\/gi, "/");
                };

                Path.relativeToAbsolute = function (absolute_parent_path, relative_path) {
                    if (Path.isRelative(relative_path)) {
                        var absolute_parent_directory = _path.dirname(absolute_parent_path);

                        return _path.join(absolute_parent_directory, relative_path);
                    }

                    return relative_path;
                };
                return Path;
            })();
            Util.Path = Path;
        })(Api.Util || (Api.Util = {}));
        var Util = Api.Util;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var Diagnostic = (function () {
                function Diagnostic(type, path, text, message) {
                    this.type = type;
                    this.path = path;
                    this.text = text;
                    this.message = message;
                    this.line_index = 0;

                    this.char_index = 0;
                }
                Diagnostic.prototype.computeLineInfo = function (content, start) {
                    for (var i = 0; i < start; i++) {
                        var ch = content[i];

                        if (ch == '\r\n') {
                            this.line_index += 1;

                            this.char_index = 0;

                            i += 1;
                        }

                        if (ch == '\n') {
                            this.line_index += 1;

                            this.char_index = 0;
                        }

                        this.char_index += 1;
                    }
                };

                Diagnostic.prototype.toString = function () {
                    return this.path + " [" + (this.line_index + 1).toString() + ":" + (this.char_index + 1).toString() + "] " + this.message;
                };
                return Diagnostic;
            })();
            Units.Diagnostic = Diagnostic;
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var Unit = (function () {
                function Unit(path, content, diagnostics) {
                    this.path = path;

                    this.content = content;

                    this.diagnostics = diagnostics;
                }
                Unit.prototype.hasError = function () {
                    if (this.diagnostics) {
                        return this.diagnostics.length > 0;
                    }

                    return false;
                };
                return Unit;
            })();
            Units.Unit = Unit;
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var SourceUnit = (function (_super) {
                __extends(SourceUnit, _super);
                function SourceUnit(path, content, diagnostics, remote) {
                    _super.call(this, path, content, diagnostics);

                    this.remote = remote;

                    this.syntaxChecked = false;

                    this.typeChecked = false;
                }
                SourceUnit.prototype.references = function () {
                    var result = [];

                    if (this.content) {
                        var lines = this.content.split('\r\n');

                        if (lines.length === 1) {
                            lines = this.content.split('\n');
                        }

                        for (var n in lines) {
                            var reference_pattern = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/gim;

                            var match = reference_pattern.exec(lines[n]);

                            if (match) {
                                result.unshift(match[3]);
                            }
                        }
                    }
                    return result;
                };
                return SourceUnit;
            })(Units.Unit);
            Units.SourceUnit = SourceUnit;
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Resolve) {
            var Node = (function () {
                function Node() {
                    this.references = [];
                }
                return Node;
            })();
            Resolve.Node = Node;

            var Topology = (function () {
                function Topology() {
                }
                Topology.graph = function (units) {
                    var nodes = [];

                    for (var n in units) {
                        var node = new TypeScript.Api.Resolve.Node();

                        node.path = units[n].path;

                        node.references = units[n].references();

                        for (var m in node.references) {
                            node.references[m] = Api.Util.Path.relativeToAbsolute(node.path, node.references[m]);

                            node.references[m] = node.references[m].replace(/\\/g, '/');
                        }

                        node.path = node.path.replace(/\\/g, '/');

                        nodes.push(node);
                    }

                    return nodes;
                };

                Topology.sort = function (units) {
                    var queue = [];

                    var result = [];

                    var max_iterations = units.length * units.length;

                    var iteration = 0;

                    for (var n in units) {
                        queue.push(units[n]);
                    }

                    while (queue.length > 0) {
                        var item = queue.shift();

                        var resolved = true;

                        var references = item.references();

                        for (var n in references) {
                            var reference = Api.Util.Path.relativeToAbsolute(item.path, references[n]);

                            var unit = null;

                            for (var m in result) {
                                if (result[m].path == reference) {
                                    unit = result[m];

                                    break;
                                }
                            }

                            if (unit == null) {
                                resolved = false;

                                break;
                            }
                        }

                        if (resolved) {
                            result.push(item);
                        } else {
                            queue.push(item);
                        }

                        iteration = iteration + 1;

                        if (iteration > max_iterations) {
                            units.reverse();

                            return units;
                        }
                    }

                    return result;
                };
                return Topology;
            })();
            Resolve.Topology = Topology;
        })(Api.Resolve || (Api.Resolve = {}));
        var Resolve = Api.Resolve;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Resolve) {
            var LoadParameter = (function () {
                function LoadParameter(parent_filename, filename) {
                    this.parent_filename = parent_filename;

                    this.filename = Api.Util.Path.relativeToAbsolute(parent_filename, filename);
                }
                return LoadParameter;
            })();
            Resolve.LoadParameter = LoadParameter;

            var Resolver = (function () {
                function Resolver(io, logger) {
                    this.io = io;
                    this.logger = logger;
                    this.pending = [];

                    this.closed = [];

                    this.units = [];
                }
                Resolver.prototype.resolve = function (sources, callback) {
                    for (var n in sources) {
                        var parameter = new TypeScript.Api.Resolve.LoadParameter(process.mainModule.filename, sources[n]);

                        this.pending.push(parameter);
                    }

                    this.load(callback);
                };

                Resolver.prototype.load = function (callback) {
                    var _this = this;
                    var parameter = this.pending.pop();

                    if (!this.visited(parameter)) {
                        this.closed.push(parameter);

                        var parent_filename = parameter.parent_filename;

                        this.io.readFile(parameter.filename, function (iofile) {
                            var unit = new TypeScript.Api.Units.SourceUnit(iofile.path, iofile.content, [], iofile.remote);

                            if (iofile.errors.length > 0) {
                                for (var n in iofile.errors) {
                                    var error = iofile.errors[n];

                                    var diagnostic = new TypeScript.Api.Units.Diagnostic("resolve", parent_filename, error.text, error.message);

                                    unit.diagnostics.push(diagnostic);
                                }
                            }

                            if (unit.diagnostics.length == 0) {
                                for (var n in unit.references()) {
                                    var parameter = new TypeScript.Api.Resolve.LoadParameter(unit.path, unit.references()[n]);

                                    _this.pending.push(parameter);
                                }
                            }

                            _this.units.push(unit);

                            _this.next(callback);
                        });
                    } else {
                        this.next(callback);
                    }
                };

                Resolver.prototype.next = function (callback) {
                    if (this.pending.length > 0) {
                        this.load(callback);

                        return;
                    }

                    this.units = TypeScript.Api.Resolve.Topology.sort(this.units);

                    callback(this.units);
                };

                Resolver.prototype.visited = function (parameter) {
                    for (var n in this.closed) {
                        if (this.closed[n].filename == parameter.filename) {
                            return true;
                        }
                    }
                    return false;
                };
                return Resolver;
            })();
            Resolve.Resolver = Resolver;
        })(Api.Resolve || (Api.Resolve = {}));
        var Resolve = Api.Resolve;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var CompiledUnit = (function (_super) {
                __extends(CompiledUnit, _super);
                function CompiledUnit(path, content, diagnostics, ast, declaration) {
                    _super.call(this, path, content, diagnostics);

                    this.ast = ast;

                    this.declaration = declaration;
                }
                CompiledUnit.prototype.references = function () {
                    var result = [];

                    if (this.declaration) {
                        var lines = this.declaration.split('\r\n');

                        if (lines.length === 1) {
                            lines = this.declaration.split('\n');
                        }

                        for (var n in lines) {
                            var reference_pattern = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/gim;

                            var match = reference_pattern.exec(lines[n]);

                            if (match) {
                                result.unshift(match[3]);
                            }
                        }
                    }
                    return result;
                };
                return CompiledUnit;
            })(Units.Unit);
            Units.CompiledUnit = CompiledUnit;
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Compile) {
            var Emitter = (function () {
                function Emitter() {
                    this.files = [];
                }
                Emitter.prototype.writeFile = function (fileName, contents, writeByteOrderMark) {
                    this.files[fileName] = contents;

                    return this.files[fileName];
                };

                Emitter.prototype.directoryExists = function (path) {
                    return true;
                };

                Emitter.prototype.fileExists = function (path) {
                    return true;
                };

                Emitter.prototype.resolvePath = function (path) {
                    return '/';
                };
                return Emitter;
            })();
            Compile.Emitter = Emitter;
        })(Api.Compile || (Api.Compile = {}));
        var Compile = Api.Compile;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Compile) {
            var Compiler = (function () {
                function Compiler(logger) {
                    this.logger = logger;

                    this.sourceUnits = [];

                    var settings = new TypeScript.CompilationSettings();

                    settings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript5;

                    settings.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;

                    settings.disallowBool = true;

                    settings.generateDeclarationFiles = true;

                    this.compiler = new TypeScript.TypeScriptCompiler(new TypeScript.Api.Loggers.NullLogger(), settings, TypeScript.diagnosticMessages);

                    this.compiler.logger = new TypeScript.Api.Loggers.NullLogger();
                }
                Compiler.prototype.isSourceUnitInCache = function (sourceUnit) {
                    for (var n in this.sourceUnits) {
                        if (this.sourceUnits[n].path == sourceUnit.path) {
                            return true;
                        }
                    }
                    return false;
                };

                Compiler.prototype.isSourceUnitUpdated = function (sourceUnit) {
                    for (var n in this.sourceUnits) {
                        if (this.sourceUnits[n].path == sourceUnit.path) {
                            if (this.sourceUnits[n].content != sourceUnit.content) {
                                return true;
                            }
                        }
                    }
                    return false;
                };

                Compiler.prototype.addSourceUnit = function (sourceUnit) {
                    if (!sourceUnit.hasError()) {
                        var snapshot = TypeScript.ScriptSnapshot.fromString(sourceUnit.content);

                        var references = TypeScript.getReferencedFiles(sourceUnit.path, snapshot);

                        if (!this.isSourceUnitInCache(sourceUnit)) {
                            sourceUnit.syntaxChecked = false;

                            sourceUnit.typeChecked = false;

                            this.compiler.addSourceUnit(sourceUnit.path, snapshot, 1, 0, false, references);

                            this.sourceUnits.push(sourceUnit);

                            return;
                        }

                        if (this.isSourceUnitUpdated(sourceUnit)) {
                            sourceUnit.syntaxChecked = false;

                            sourceUnit.typeChecked = false;

                            var oldSourceUnit = null;

                            for (var n in this.sourceUnits) {
                                if (this.sourceUnits[n].path == sourceUnit.path) {
                                    oldSourceUnit = this.sourceUnits[n];
                                }
                            }

                            var textSpan = new TypeScript.TextSpan(0, oldSourceUnit.content.length);

                            var textChange = new TypeScript.TextChangeRange(textSpan, sourceUnit.content.length);

                            this.compiler.updateSourceUnit(sourceUnit.path, snapshot, 0, false, textChange);

                            for (var n in this.sourceUnits) {
                                if (this.sourceUnits[n].path == sourceUnit.path) {
                                    this.sourceUnits[n] = sourceUnit;
                                }
                            }

                            return;
                        }
                    }
                };

                Compiler.prototype.syntaxCheck = function (sourceUnit) {
                    var result = [];

                    var _diagnostics = this.compiler.getSyntacticDiagnostics(sourceUnit.path);

                    for (var n in _diagnostics) {
                        var diagnostic = new TypeScript.Api.Units.Diagnostic("syntax", _diagnostics[n].fileName(), _diagnostics[n].text(), _diagnostics[n].message());

                        diagnostic.computeLineInfo(sourceUnit.content, _diagnostics[n].start());

                        result.push(diagnostic);
                    }

                    return result;
                };

                Compiler.prototype.typeCheck = function (sourceUnit) {
                    var result = [];

                    this.compiler.pullTypeCheck();

                    var _diagnostics = this.compiler.getSemanticDiagnostics(sourceUnit.path);

                    for (var n in _diagnostics) {
                        var diagnostic = new TypeScript.Api.Units.Diagnostic("typecheck", _diagnostics[n].fileName(), _diagnostics[n].text(), _diagnostics[n].message());

                        diagnostic.computeLineInfo(sourceUnit.content, _diagnostics[n].start());

                        result.push(diagnostic);
                    }

                    return result;
                };

                Compiler.prototype.emitUnits = function (sourceUnits) {
                    var emitter_io_map = [];

                    var emitter = new TypeScript.Api.Compile.Emitter();

                    this.compiler.emitAll(emitter, function (inputFile, outputFile) {
                        emitter_io_map[outputFile] = inputFile;
                    });

                    this.compiler.emitAllDeclarations();

                    var result = [];

                    for (var file in emitter.files) {
                        var document = this.compiler.getDocument(emitter_io_map[file]);

                        if (document) {
                            var sourceUnit = null;

                            for (var n in sourceUnits) {
                                if (sourceUnits[n].path == emitter_io_map[file]) {
                                    sourceUnit = sourceUnits[n];
                                }
                            }

                            if (sourceUnit) {
                                var get_source = function (sourceUnitPath, emitter) {
                                    sourceUnitPath = sourceUnitPath.replace(/\\/g, '/').replace(/.ts$/, '.js');

                                    var content = '';

                                    for (var filename in emitter.files) {
                                        if (filename.replace(/\\/g, '/') == sourceUnitPath) {
                                            content = emitter.files[filename];
                                        }
                                    }
                                    return content;
                                };
                                var get_declaration_source = function (sourceUnitPath, emitter) {
                                    sourceUnitPath = sourceUnitPath.replace(/\\/g, '/').replace(/.ts$/, '.d.ts');

                                    var content = '';

                                    for (var filename in emitter.files) {
                                        if (filename.replace(/\\/g, '/') == sourceUnitPath) {
                                            content = emitter.files[filename];
                                        }
                                    }

                                    return content;
                                };

                                var path = sourceUnit.path.replace(/\\/g, '/');

                                var content = get_source(path, emitter);

                                var declaration = get_declaration_source(path, emitter);

                                var diagnostics = sourceUnit.diagnostics;

                                var ast = document.script;

                                result.push(new TypeScript.Api.Units.CompiledUnit(path, content, diagnostics, ast, declaration));
                            }
                        }
                    }

                    return result;
                };

                Compiler.prototype.compile = function (sourceUnits, callback) {
                    this.sourceUnits = this.sourceUnits.filter(function (element, index, array) {
                        for (var n in sourceUnits) {
                            if (sourceUnits[n].path == element.path) {
                                return true;
                            }
                        }

                        return false;
                    });

                    for (var n in sourceUnits) {
                        this.addSourceUnit(sourceUnits[n]);
                    }

                    for (var n in this.sourceUnits) {
                        if (!this.sourceUnits[n].syntaxChecked) {
                            var syntax_diagnostics = this.syntaxCheck(this.sourceUnits[n]);

                            for (var m in syntax_diagnostics) {
                                this.sourceUnits[n].diagnostics.push(syntax_diagnostics[m]);
                            }

                            this.sourceUnits[n].syntaxChecked = true;
                        }
                    }

                    for (var n in this.sourceUnits) {
                        if (!this.sourceUnits[n].typeChecked) {
                            var typecheck_diagnostics = this.typeCheck(this.sourceUnits[n]);

                            for (var m in typecheck_diagnostics) {
                                this.sourceUnits[n].diagnostics.push(typecheck_diagnostics[m]);
                            }

                            this.sourceUnits[n].typeChecked = true;
                        }
                    }

                    var compiledUnits = this.emitUnits(this.sourceUnits);

                    callback(compiledUnits);
                };
                return Compiler;
            })();
            Compile.Compiler = Compiler;
        })(Api.Compile || (Api.Compile = {}));
        var Compile = Api.Compile;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Import = (function () {
                function Import() {
                }
                Import.create = function (ast) {
                    var result = new Import();

                    result.name = ast.id.text;

                    result.alias = ast.getAliasName(ast);

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    return result;
                };
                return Import;
            })();
            Reflect.Import = Import;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Type = (function () {
                function Type() {
                    this.name = "any";

                    this.arguments = [];

                    this.arrayCount = 0;
                }
                Type.qualifyName = function (ast) {
                    var result = [];

                    var walk = function (ast) {
                        switch (ast.nodeType) {
                            case TypeScript.NodeType.Name:
                                var name = ast;

                                result.push(name.text);

                                break;

                            case TypeScript.NodeType.MemberAccessExpression:
                                var expression = ast;

                                walk(expression.operand1);

                                walk(expression.operand2);

                                break;

                            case TypeScript.NodeType.TypeRef:
                                var type_reference = ast;

                                walk(type_reference.term);

                                break;

                            case TypeScript.NodeType.GenericType:
                                var generic_type = ast;

                                var expression = generic_type.name;

                                switch (expression.nodeType) {
                                    case TypeScript.NodeType.Name:
                                        walk(expression);

                                        break;

                                    case TypeScript.NodeType.MemberAccessExpression:
                                        walk(expression);

                                        break;
                                }

                                break;

                            default:
                                result.push("any");

                                break;
                        }
                    };

                    walk(ast);

                    return result.join('.');
                };

                Type.create = function (ast) {
                    var create_member_access_expression = function (ast) {
                        var type = new TypeScript.Api.Reflect.Type();

                        type.name = Type.qualifyName(ast);

                        return type;
                    };

                    var create_named_type = function (namedDeclaraion) {
                        var type = new TypeScript.Api.Reflect.Type();

                        type.name = Type.qualifyName(namedDeclaraion);

                        return type;
                    };

                    var create_type = function (typeRef) {
                        var type = new TypeScript.Api.Reflect.Type();

                        type.name = Type.qualifyName(typeRef);

                        type.arrayCount = typeRef.arrayCount;

                        type.limChar = typeRef.limChar;

                        type.minChar = typeRef.minChar;

                        if (typeRef.term.nodeType == TypeScript.NodeType.GenericType) {
                            var genericType = typeRef.term;

                            for (var n in genericType.typeArguments.members) {
                                var typeRef = genericType.typeArguments.members[n];

                                type.arguments.push(create_type(typeRef));
                            }
                        }

                        return type;
                    };

                    var create_generic_type = function (genericType) {
                        var type = new TypeScript.Api.Reflect.Type();

                        type.name = Type.qualifyName(genericType);

                        type.limChar = genericType.limChar;

                        type.minChar = genericType.minChar;

                        for (var n in genericType.typeArguments.members) {
                            var typeRef = genericType.typeArguments.members[n];

                            type.arguments.push(create_type(typeRef));
                        }

                        return type;
                    };

                    var type = null;

                    switch (ast.nodeType) {
                        case TypeScript.NodeType.Name:
                            type = create_named_type(ast);

                            break;

                        case TypeScript.NodeType.GenericType:
                            type = create_generic_type(ast);

                            break;

                        case TypeScript.NodeType.TypeRef:
                            type = create_type(ast);

                            break;

                        case TypeScript.NodeType.MemberAccessExpression:
                            type = create_member_access_expression(ast);

                            break;
                    }

                    return type;
                };
                return Type;
            })();
            Reflect.Type = Type;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Parameter = (function () {
                function Parameter() {
                }
                Parameter.load_type = function (result, ast) {
                    if (!ast.typeExpr) {
                        result.type = new TypeScript.Api.Reflect.Type();

                        return;
                    }
                    result.type = TypeScript.Api.Reflect.Type.create(ast.typeExpr);
                };

                Parameter.create = function (ast) {
                    var result = new Parameter();

                    result.name = ast.id.text;

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    Parameter.load_type(result, ast);

                    return result;
                };
                return Parameter;
            })();
            Reflect.Parameter = Parameter;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Method = (function () {
                function Method() {
                    this.parameters = [];

                    this.comments = [];
                }
                Method.load_comments = function (result, ast) {
                    var comments = ast.getDocComments();

                    for (var n in comments) {
                        result.comments.push(comments[n].content);
                    }
                };

                Method.load_returns = function (result, ast) {
                    if (ast.returnTypeAnnotation) {
                        var type_reference = ast.returnTypeAnnotation;

                        result.returns = TypeScript.Api.Reflect.Type.create(type_reference);

                        return;
                    }
                    result.returns = new TypeScript.Api.Reflect.Type();
                };

                Method.load_parameters = function (result, ast) {
                    for (var n in ast.arguments.members) {
                        var argument = ast.arguments.members[n];

                        var parameter = TypeScript.Api.Reflect.Parameter.create(argument);

                        result.parameters.push(parameter);
                    }
                };

                Method.create = function (ast) {
                    var result = new Method();

                    result.name = ast.isConstructor ? "constructor" : ast.getNameText();

                    result.isConstructor = ast.isConstructor;

                    result.isStatic = ast.isStatic();

                    result.isSignature = ast.isSignature();

                    result.isCallMember = ast.isCallMember();

                    result.isDeclaration = ast.isDeclaration();

                    result.isExpression = ast.isExpression();

                    result.isGetAccessor = ast.isGetAccessor();

                    result.isSetAccessor = ast.isSetAccessor();

                    result.isIndexer = ast.isIndexerMember();

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    Method.load_comments(result, ast);

                    Method.load_returns(result, ast);

                    Method.load_parameters(result, ast);

                    return result;
                };
                return Method;
            })();
            Reflect.Method = Method;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Variable = (function () {
                function Variable() {
                    this.comments = [];
                }
                Variable.load_comments = function (result, ast) {
                    var comments = ast.getDocComments();

                    for (var n in comments) {
                        result.comments.push(comments[n].content);
                    }
                };

                Variable.load_type = function (result, ast) {
                    if (!ast.typeExpr) {
                        result.type = new TypeScript.Api.Reflect.Type();

                        return;
                    }

                    result.type = TypeScript.Api.Reflect.Type.create(ast.typeExpr);
                };

                Variable.create = function (ast) {
                    var result = new Variable();

                    result.name = ast.id.text;

                    result.isProperty = ast.isProperty();

                    result.isStatic = ast.isStatic();

                    result.isStatement = ast.isStatement();

                    result.isExpression = ast.isExpression();

                    result.isExported = ast.isExported();

                    result.isStatementOrExpression = ast.isStatementOrExpression();

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    Variable.load_type(result, ast);

                    Variable.load_comments(result, ast);

                    return result;
                };
                return Variable;
            })();
            Reflect.Variable = Variable;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Interface = (function () {
                function Interface() {
                    this.methods = [];

                    this.variables = [];

                    this.extends = [];

                    this.parameters = [];
                }
                Interface.load_parameters = function (result, ast) {
                    if (ast.typeParameters) {
                        if (ast.typeParameters.members) {
                            for (var n in ast.typeParameters.members) {
                                result.parameters.push(ast.typeParameters.members[n].name.text);
                            }
                        }
                    }
                };

                Interface.load_extends = function (result, ast) {
                    if (ast.extendsList) {
                        if (ast.extendsList.members) {
                            for (var n in ast.extendsList.members) {
                                var obj = TypeScript.Api.Reflect.Type.create(ast.extendsList.members[n]);

                                result.extends.push(obj);
                            }
                        }
                    }
                };

                Interface.load_methods = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.FunctionDeclaration) {
                            var obj = TypeScript.Api.Reflect.Method.create(member);

                            result.methods.push(obj);
                        }
                    }
                };

                Interface.load_variables = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.VariableDeclarator) {
                            var obj = TypeScript.Api.Reflect.Variable.create(member);

                            result.variables.push(obj);
                        }
                    }
                };

                Interface.create = function (ast) {
                    var result = new Interface();

                    result.name = ast.name.text;

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    Interface.load_parameters(result, ast);

                    Interface.load_extends(result, ast);

                    Interface.load_methods(result, ast);

                    Interface.load_variables(result, ast);

                    return result;
                };
                return Interface;
            })();
            Reflect.Interface = Interface;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Class = (function () {
                function Class() {
                    this.methods = [];

                    this.variables = [];

                    this.extends = [];

                    this.implements = [];

                    this.parameters = [];
                }
                Class.load_parameters = function (result, ast) {
                    if (ast.typeParameters) {
                        if (ast.typeParameters.members) {
                            for (var n in ast.typeParameters.members) {
                                result.parameters.push(ast.typeParameters.members[n].name.text);
                            }
                        }
                    }
                };

                Class.load_extends = function (result, ast) {
                    if (ast.extendsList) {
                        if (ast.extendsList.members) {
                            for (var n in ast.extendsList.members) {
                                var obj = TypeScript.Api.Reflect.Type.create(ast.extendsList.members[n]);

                                result.extends.push(obj);
                            }
                        }
                    }
                };

                Class.load_implements = function (result, ast) {
                    if (ast.implementsList) {
                        if (ast.implementsList.members) {
                            for (var n in ast.implementsList.members) {
                                var obj = TypeScript.Api.Reflect.Type.create(ast.implementsList.members[n]);

                                result.implements.push(obj);
                            }
                        }
                    }
                };

                Class.load_methods = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.FunctionDeclaration) {
                            var obj = TypeScript.Api.Reflect.Method.create(member);

                            result.methods.push(obj);
                        }
                    }
                };

                Class.load_variables = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.VariableDeclarator) {
                            var obj = TypeScript.Api.Reflect.Variable.create(member);

                            result.variables.push(obj);
                        }
                    }
                };

                Class.create = function (ast) {
                    var result = new Class();

                    result.name = ast.name.text;

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    Class.load_parameters(result, ast);

                    Class.load_implements(result, ast);

                    Class.load_extends(result, ast);

                    Class.load_methods(result, ast);

                    Class.load_variables(result, ast);

                    return result;
                };
                return Class;
            })();
            Reflect.Class = Class;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Module = (function () {
                function Module() {
                    this.imports = [];

                    this.modules = [];

                    this.interfaces = [];

                    this.classes = [];

                    this.methods = [];

                    this.variables = [];
                }
                Module.load_imports = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.ImportDeclaration) {
                            var obj = TypeScript.Api.Reflect.Import.create(member);

                            result.imports.push(obj);
                        }
                    }
                };

                Module.load_modules = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.ModuleDeclaration) {
                            var obj = TypeScript.Api.Reflect.Module.create(member);

                            result.modules.push(obj);
                        }
                    }
                };

                Module.load_interfaces = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.InterfaceDeclaration) {
                            var obj = TypeScript.Api.Reflect.Interface.create(member);

                            result.interfaces.push(obj);
                        }
                    }
                };

                Module.load_classes = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.ClassDeclaration) {
                            var obj = TypeScript.Api.Reflect.Class.create(member);

                            result.classes.push(obj);
                        }
                    }
                };

                Module.load_methods = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.FunctionDeclaration) {
                            var obj = TypeScript.Api.Reflect.Method.create(member);

                            result.methods.push(obj);
                        }
                    }
                };

                Module.load_variables = function (result, ast) {
                    for (var n in ast.members.members) {
                        var member = ast.members.members[n];

                        if (member.nodeType == TypeScript.NodeType.VariableStatement) {
                            var statement = member;

                            if (statement.declaration) {
                                if (statement.declaration.declarators) {
                                    for (var m in statement.declaration.declarators.members) {
                                        var obj = TypeScript.Api.Reflect.Variable.create(statement.declaration.declarators.members[m]);

                                        result.variables.push(obj);
                                    }
                                }
                            }
                        }
                    }
                };

                Module.create = function (ast) {
                    var result = new Module();

                    result.name = ast.prettyName;

                    result.limChar = ast.limChar;

                    result.minChar = ast.minChar;

                    Module.load_imports(result, ast);

                    Module.load_modules(result, ast);

                    Module.load_interfaces(result, ast);

                    Module.load_classes(result, ast);

                    Module.load_methods(result, ast);

                    Module.load_variables(result, ast);

                    return result;
                };
                return Module;
            })();
            Reflect.Module = Module;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Script = (function () {
                function Script() {
                    this.modules = [];

                    this.interfaces = [];

                    this.classes = [];

                    this.methods = [];

                    this.variables = [];
                }
                Script.load_modules = function (result, ast) {
                    for (var n in ast.moduleElements.members) {
                        var member = ast.moduleElements.members[n];

                        if (member.nodeType == TypeScript.NodeType.ModuleDeclaration) {
                            var obj = TypeScript.Api.Reflect.Module.create(member);

                            result.modules.push(obj);
                        }
                    }
                };

                Script.load_interfaces = function (result, ast) {
                    for (var n in ast.moduleElements.members) {
                        var member = ast.moduleElements.members[n];

                        if (member.nodeType == TypeScript.NodeType.InterfaceDeclaration) {
                            var obj = TypeScript.Api.Reflect.Interface.create(member);

                            result.interfaces.push(obj);
                        }
                    }
                };
                Script.load_classes = function (result, ast) {
                    for (var n in ast.moduleElements.members) {
                        var member = ast.moduleElements.members[n];

                        if (member.nodeType == TypeScript.NodeType.ClassDeclaration) {
                            var obj = TypeScript.Api.Reflect.Class.create(member);

                            result.classes.push(obj);
                        }
                    }
                };

                Script.load_methods = function (result, ast) {
                    for (var n in ast.moduleElements.members) {
                        var member = ast.moduleElements.members[n];

                        if (member.nodeType == TypeScript.NodeType.FunctionDeclaration) {
                            var obj = TypeScript.Api.Reflect.Method.create(member);

                            result.methods.push(obj);
                        }
                    }
                };

                Script.load_variables = function (result, ast) {
                    for (var n in ast.moduleElements.members) {
                        var member = ast.moduleElements.members[n];

                        if (member.nodeType == TypeScript.NodeType.VariableStatement) {
                            var statement = member;

                            if (statement.declaration) {
                                if (statement.declaration.declarators) {
                                    for (var m in statement.declaration.declarators.members) {
                                        var obj = TypeScript.Api.Reflect.Variable.create(statement.declaration.declarators.members[m]);

                                        result.variables.push(obj);
                                    }
                                }
                            }
                        }
                    }
                };

                Script.create = function (path, ast) {
                    var result = new Script();

                    result.path = path;

                    Script.load_modules(result, ast);

                    Script.load_interfaces(result, ast);

                    Script.load_classes(result, ast);

                    Script.load_methods(result, ast);

                    Script.load_variables(result, ast);

                    return result;
                };
                return Script;
            })();
            Reflect.Script = Script;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Reflection = (function () {
                function Reflection() {
                    this.scripts = [];
                }
                return Reflection;
            })();
            Reflect.Reflection = Reflection;
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
