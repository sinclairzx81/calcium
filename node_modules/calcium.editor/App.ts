/// <reference path="decl/references.ts" />

module calcium.editor 
{    
    export class StaticRouter extends calcium.web.Router 
    {
        constructor( public path : string, public storage : calcium.storage.Storage )  
        { 
            super();
           
            this.get(this.path + "/[path]", (app) => { this.index(app);  });
        }
        
        public index(context:calcium.web.Context) : void 
        {    
            var path = calcium.storage.util.path.join(['/', context.parameter.path]);
            
            if( calcium.storage.util.path.isfile(path) ) 
            {
                this.storage.readstream(path, (readstream) => 
                {
                    if(!readstream) 
                    {    
                        context.response.writeHead(404, {'content-type' : 'text/plain'});

                        context.response.end('not found');

                        return;
                    }
                    
                    var mime = calcium.storage.util.mime.fromfilename(path);

                    context.response.writeHead(200, {'content-type' : mime});

                    readstream.pipe(context.response);
                });
                
                return;
            } 
            else  
            {
                this.storage.readfolder(path, (objects) => 
                {    
                    var json = JSON.stringify(objects, null, ' ');

                    context.response.writeHead(200, {'content-type' : 'application/json'});

                    context.response.end(json);     
                });
            }
        }
    }

    export class EditorRouter extends calcium.web.Router
    {
        constructor(public storage : calcium.storage.Storage)
        {
            super();
            
            this.get('/', (app) => { this.index(app);  });
        }

        public index(context:calcium.web.Context) : void 
        {
            calcium.template.storage = this.storage;

            calcium.template.render("/index.html", null, (content)=> {
                
                context.response.writeHead(200, {'content-type' : 'text/plain'});

                context.response.end(content);

            });
        }
    }
    
    export class App extends calcium.web.App 
    {    
        public managed_directory : calcium.storage.Storage;

        public static_directory  : calcium.storage.Storage;

        public view_directory    : calcium.storage.Storage;

        public hub               : calcium.web.Hub;

        constructor(directory:string) 
        {            
            super();
            
            this.hub     = new calcium.web.Hub();

            this.managed_directory   = new calcium.storage.local.Storage({ basepath: directory });
            
            this.static_directory    = new calcium.storage.local.Storage({ basepath: __dirname + "/static" });

            this.view_directory      = new calcium.storage.local.Storage({ basepath: __dirname + "/views" });

            this.routers.push( new calcium.editor.EditorRouter  ( this.view_directory ) );

            this.routers.push( new calcium.editor.StaticRouter  ( '/static', this.static_directory ) );
        }
    }
}