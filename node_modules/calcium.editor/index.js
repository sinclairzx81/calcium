var calcium;
(function (calcium) {
    calcium.web = require('calcium.web');
    calcium.template = require('calcium.template');
    calcium.logging = require('calcium.logging');
    calcium.storage = require('calcium.storage');
})(calcium || (calcium = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var calcium;
(function (calcium) {
    (function (editor) {
        var StaticRouter = (function (_super) {
            __extends(StaticRouter, _super);
            function StaticRouter(path, storage) {
                var _this = this;
                _super.call(this);
                this.path = path;
                this.storage = storage;

                this.get(this.path + "/[path]", function (app) {
                    _this.index(app);
                });
            }
            StaticRouter.prototype.index = function (context) {
                var path = calcium.storage.util.path.join(['/', context.parameter.path]);

                if (calcium.storage.util.path.isfile(path)) {
                    this.storage.readstream(path, function (readstream) {
                        if (!readstream) {
                            context.response.writeHead(404, { 'content-type': 'text/plain' });

                            context.response.end('not found');

                            return;
                        }

                        var mime = calcium.storage.util.mime.fromfilename(path);

                        context.response.writeHead(200, { 'content-type': mime });

                        readstream.pipe(context.response);
                    });

                    return;
                } else {
                    this.storage.readfolder(path, function (objects) {
                        var json = JSON.stringify(objects, null, ' ');

                        context.response.writeHead(200, { 'content-type': 'application/json' });

                        context.response.end(json);
                    });
                }
            };
            return StaticRouter;
        })(calcium.web.Router);
        editor.StaticRouter = StaticRouter;

        var EditorRouter = (function (_super) {
            __extends(EditorRouter, _super);
            function EditorRouter(storage) {
                var _this = this;
                _super.call(this);
                this.storage = storage;

                this.get('/', function (app) {
                    _this.index(app);
                });
            }
            EditorRouter.prototype.index = function (context) {
                calcium.template.storage = this.storage;

                calcium.template.render("/index.html", null, function (content) {
                    context.response.writeHead(200, { 'content-type': 'text/plain' });

                    context.response.end(content);
                });
            };
            return EditorRouter;
        })(calcium.web.Router);
        editor.EditorRouter = EditorRouter;

        var App = (function (_super) {
            __extends(App, _super);
            function App(directory) {
                _super.call(this);

                this.hub = new calcium.web.Hub();

                this.managed_directory = new calcium.storage.local.Storage({ basepath: directory });

                this.static_directory = new calcium.storage.local.Storage({ basepath: __dirname + "/static" });

                this.view_directory = new calcium.storage.local.Storage({ basepath: __dirname + "/views" });

                this.routers.push(new calcium.editor.EditorRouter(this.view_directory));

                this.routers.push(new calcium.editor.StaticRouter('/static', this.static_directory));
            }
            return App;
        })(calcium.web.App);
        editor.App = App;
    })(calcium.editor || (calcium.editor = {}));
    var editor = calcium.editor;
})(calcium || (calcium = {}));
exports = calcium.editor;
module.exports = exports;