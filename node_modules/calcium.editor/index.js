var calcium;
(function (calcium) {
    calcium.web = require('calcium.web');
    calcium.template = require('calcium.template');
    calcium.logging = require('calcium.logging');
    calcium.storage = require('calcium.storage');
})(calcium || (calcium = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var calcium;
(function (calcium) {
    (function (editor) {
        (function (routers) {
            var ViewRouter = (function (_super) {
                __extends(ViewRouter, _super);
                function ViewRouter(storage) {
                    var _this = this;
                    _super.call(this);
                    this.storage = storage;

                    this.get('/', function (app) {
                        _this.index(app);
                    });
                }
                ViewRouter.prototype.index = function (context) {
                    calcium.template.storage = this.storage;

                    calcium.template.render("/views/editor/index.html", null, function (content) {
                        context.response.writeHead(200, { 'content-type': 'text/html' });

                        context.response.end(content);
                    });
                };
                return ViewRouter;
            })(calcium.web.Router);
            routers.ViewRouter = ViewRouter;
        })(editor.routers || (editor.routers = {}));
        var routers = editor.routers;
    })(calcium.editor || (calcium.editor = {}));
    var editor = calcium.editor;
})(calcium || (calcium = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var calcium;
(function (calcium) {
    (function (editor) {
        (function (routers) {
            var node = {
                url: require('url')
            };

            var StaticRouter = (function (_super) {
                __extends(StaticRouter, _super);
                function StaticRouter(path, storage) {
                    var _this = this;
                    _super.call(this);
                    this.path = path;
                    this.storage = storage;

                    this.get(this.path + "/[path]", function (app) {
                        _this.index(app);
                    });
                }
                StaticRouter.prototype.index = function (context) {
                    var path = calcium.storage.util.path.join(['/', context.parameter.path]);

                    var uri = node.url.parse(path);

                    path = uri.pathname;

                    if (calcium.storage.util.path.isfile(path)) {
                        this.storage.readstream(path, function (readstream) {
                            if (!readstream) {
                                context.response.writeHead(404, { 'content-type': 'text/plain' });

                                context.response.end('not found');

                                return;
                            }

                            var mime = calcium.storage.util.mime.fromfilename(path);

                            context.response.writeHead(200, { 'content-type': mime });

                            readstream.pipe(context.response);
                        });

                        return;
                    } else {
                        this.storage.readfolder(path, function (objects) {
                            var json = JSON.stringify(objects, null, ' ');

                            context.response.writeHead(200, { 'content-type': 'application/json' });

                            context.response.end(json);
                        });
                    }
                };
                return StaticRouter;
            })(calcium.web.Router);
            routers.StaticRouter = StaticRouter;
        })(editor.routers || (editor.routers = {}));
        var routers = editor.routers;
    })(calcium.editor || (calcium.editor = {}));
    var editor = calcium.editor;
})(calcium || (calcium = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var calcium;
(function (calcium) {
    (function (editor) {
        (function (routers) {
            var StorageRouter = (function (_super) {
                __extends(StorageRouter, _super);
                function StorageRouter(path, storage) {
                    var _this = this;
                    _super.call(this);
                    this.path = path;
                    this.storage = storage;

                    this.get(this.path, function (context) {
                        _this._get(context);
                    });

                    this.get(this.path + "/[path]", function (context) {
                        _this._get(context);
                    });

                    this.post(this.path, function (context) {
                        _this._post(context);
                    });

                    this.post(this.path + "/[path]", function (context) {
                        _this._post(context);
                    });

                    this.delete(this.path, function (context) {
                        _this._delete(context);
                    });

                    this.delete(this.path + "/[path]", function (context) {
                        _this._delete(context);
                    });
                }
                StorageRouter.prototype._get = function (context) {
                    var path = calcium.storage.util.path.join(['/', context.parameter.path ? context.parameter.path : '/']);

                    if (calcium.storage.util.path.isfile(path) && calcium.storage.util.mime.fromfilename(path) != "application/octet-stream") {
                        this.storage.readstream(path, function (readstream) {
                            if (!readstream) {
                                context.response.writeHead(404, { 'content-type': 'text/plain' });

                                context.response.end('not found');

                                return;
                            }

                            var mime = calcium.storage.util.mime.fromfilename(path);

                            context.response.writeHead(200, { 'content-type': 'text/plain' });

                            readstream.pipe(context.response);
                        });

                        return;
                    } else {
                        this.storage.readfolder(path, function (objects) {
                            var json = JSON.stringify(objects, null, ' ');

                            context.response.writeHead(200, { 'content-type': 'application/json' });

                            context.response.end(json);
                        });
                    }
                };

                StorageRouter.prototype._post = function (context) {
                    var path = calcium.storage.util.path.join(['/', context.parameter.path ? context.parameter.path : '/']);

                    if (calcium.storage.util.path.isfile(path) && calcium.storage.util.mime.fromfilename(path) != "application/octet-stream") {
                        this.storage.writestream(path, function (writestream) {
                            if (writestream) {
                                context.request.pipe(writestream);

                                context.response.writeHead(200, { 'content-type': 'application/json' });

                                context.response.end('ok');
                            } else {
                                context.response.writeHead(200, { 'content-type': 'application/json' });

                                context.response.end('ok');
                            }
                        });

                        return;
                    }

                    context.response.writeHead(200, { 'content-type': 'application/json' });

                    context.response.end('ok');
                };

                StorageRouter.prototype._delete = function (context) {
                };
                return StorageRouter;
            })(calcium.web.Router);
            routers.StorageRouter = StorageRouter;
        })(editor.routers || (editor.routers = {}));
        var routers = editor.routers;
    })(calcium.editor || (calcium.editor = {}));
    var editor = calcium.editor;
})(calcium || (calcium = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var calcium;
(function (calcium) {
    (function (editor) {
        var App = (function (_super) {
            __extends(App, _super);
            function App(storage) {
                _super.call(this);
                this.storage = storage;

                this.public_directory = new calcium.storage.local.Storage({ basepath: __dirname + "/public" });

                this.routers.push(new calcium.editor.routers.ViewRouter(this.public_directory));

                this.routers.push(new calcium.editor.routers.StorageRouter('/storage', this.storage));

                this.routers.push(new calcium.editor.routers.StaticRouter('/public', this.public_directory));
            }
            return App;
        })(calcium.web.App);
        editor.App = App;
    })(calcium.editor || (calcium.editor = {}));
    var editor = calcium.editor;
})(calcium || (calcium = {}));
exports = calcium.editor;
module.exports = exports;