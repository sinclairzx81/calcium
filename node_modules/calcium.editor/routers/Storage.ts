/// <reference path="../decl/references.ts" />

module calcium.editor.routers 
{
    export class StorageRouter extends calcium.web.Router 
    {
        constructor(public path:string, public storage:calcium.storage.IDevice)  
        { 
            super();
            
            this.path = calcium.storage.util.Path.Normalize(path);

            this.get(path + '/[path]', (context) => { this.serve(context);  });
        }
        
        public serve(app:calcium.web.App) : void {

            var path = '/' + app.parameters.path;
            
            if(calcium.storage.util.Path.IsFile(path)) 
            {
                this.storage.readstream(path, (readstream) => 
                {
                    if(!readstream) 
                    {    
                        app.response.writeHead(404, {'content-type' : 'text/plain'});

                        app.response.end("route not found");  

                        return;
                    }

                    var mime = storage.util.Mime.fromfilename(path);

                    app.response.writeHead(200, {'content-type' : mime});

                    readstream.pipe(app.response);
                });

                return;
            } 
            else // its likely a directory.
            {
                this.storage.readfolder(path, (objects) => {
                    
                    var json = JSON.stringify(objects, null, ' ');

                    app.response.writeHead(200, {'content-type' : 'application/json'});

                    app.response.end(json);     
                });
            }
        }
    }
}