/// <reference path="../decl/references.ts" />

module calcium.editor.routers
{
    export class StorageRouter extends calcium.web.Router
    {
        constructor(public path:string, public storage:calcium.storage.Storage)
        {
            super();
            
            // get
            
            this.get(this.path, (context) => { this._get(context) });

            this.get(this.path + "/[path]" , (context) => { this._get(context) });
            
            // update

            this.post(this.path, (context) => { this._post(context) });

            this.post(this.path + "/[path]" , (context) => { this._post(context) });
            
            // delete
            
            this.delete(this.path, (context) => { this._delete(context) });

            this.delete(this.path + "/[path]" , (context) => { this._delete(context) });
        }
        
        public _get(context:calcium.web.Context) : void {

            var path = calcium.storage.util.path.join(['/', context.parameter.path ? context.parameter.path : '/']);
            
            if( calcium.storage.util.path.isfile(path) && calcium.storage.util.mime.fromfilename(path) != "application/octet-stream" ) 
            {
                console.log('its a file.')

                this.storage.readstream(path, (readstream) => 
                {
                    if(!readstream) 
                    {    
                        context.response.writeHead(404, {'content-type' : 'text/plain'});

                        context.response.end('not found');

                        return;
                    }
                    
                    var mime = calcium.storage.util.mime.fromfilename(path);

                    context.response.writeHead(200, {'content-type' : 'text/plain'});

                    readstream.pipe(context.response);
                });
                
                return;
            } 
            else  
            {
                console.log('its a folder.')

                this.storage.readfolder(path, (objects) => 
                {    
                    var json = JSON.stringify(objects, null, ' ');

                    context.response.writeHead(200, {'content-type' : 'application/json'});

                    context.response.end(json);     
                });
            }
        }

        public _post(context:calcium.web.Context) : void 
        {
            var path = calcium.storage.util.path.join(['/', context.parameter.path ? context.parameter.path : '/']);

            if( calcium.storage.util.path.isfile(path) && calcium.storage.util.mime.fromfilename(path) != "application/octet-stream" )  {

                this.storage.writestream(path, (writestream) => 
                {
                    if(writestream) {

                        context.request.pipe(writestream);
                        
                        context.response.writeHead(200, {'content-type' : 'application/json'});

                        context.response.end('ok');  
                    
                    }
                    else {
                    
                        context.response.writeHead(200, {'content-type' : 'application/json'});

                        context.response.end('ok');  
                    }
                });

                return;
            } 

            context.response.writeHead(200, {'content-type' : 'application/json'});

            context.response.end('ok');             
        }

        public _delete(context:calcium.web.Context) : void  {


        
        }
    }
}