/// <reference path="../decl/references.ts" />

module calcium.editor.routers
{
    export class StorageRouter extends calcium.web.Router
    {
        constructor(public path:string, public storage:calcium.storage.Storage)
        {
            super();

            this.get(this.path, (context) => { this.index(context) });

            this.get(this.path + "/[path]" , (context) => { this.index(context) });
        }

        public index(context:calcium.web.Context) : void
        {
            var path = calcium.storage.util.path.join(['/', context.parameter.path ? context.parameter.path : '/']);
            
            // rough detemination of a folder.
            if( calcium.storage.util.path.isfile(path) && calcium.storage.util.mime.fromfilename(path) != "application/octet-stream" ) 
            {
                this.storage.readstream(path, (readstream) => 
                {
                    if(!readstream) 
                    {    
                        context.response.writeHead(404, {'content-type' : 'text/plain'});

                        context.response.end('not found');

                        return;
                    }
                    
                    var mime = calcium.storage.util.mime.fromfilename(path);

                    context.response.writeHead(200, {'content-type' : mime});

                    readstream.pipe(context.response);
                });
                
                return;
            } 
            else  
            {
                this.storage.readfolder(path, (objects) => 
                {    
                    var json = JSON.stringify(objects, null, ' ');

                    context.response.writeHead(200, {'content-type' : 'application/json'});

                    context.response.end(json);     
                });
            }
        }
    }
}