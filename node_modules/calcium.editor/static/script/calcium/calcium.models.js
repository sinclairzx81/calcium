//----------------------------------------------------------------
// Dependancies
//----------------------------------------------------------------
//
// /calcium.api.js
// ../linq/linq.js
//


//----------------------------------------------------------------
// Storage Model
//----------------------------------------------------------------
var StorageModel = function(name, path) 
{    
    this.type     = ko.observable('storage');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.expanded = ko.observable(false);

    this.contents = ko.observableArray([]);         
    
    this.toggle   = function()
    {
        this.expanded( !this.expanded() )

        if (this.expanded()) 
        {
            this.load();
        }
    }

    this.load = function()
    {   
        var that = this;
        
        calcium.api.get("/storage" + this.path(), function(contents) {
            
            contents = Enumerable.From              (contents)
                                 .OrderByDescending (function (n) { return n.type })
                                 .ThenBy            (function (n) { return n.name })
                                 .ToArray           ();
            
            that.contents([]);

            for(var n in contents) 
            {
                switch( contents[n].type )
                {
                    case "storage":

                        var model = new StorageModel( contents[n].name, contents[n].fullpath);

                        model.on("data", function(content) {  that.dispatch("data", content); });
                        
                        that.contents.push( model );

                        break;

                    case "folder":
                         
                        var model = new FolderModel( contents[n].name, contents[n].fullpath);

                        model.on("data", function(content) {  that.dispatch("data", content); });
                        
                        that.contents.push( model );

                        break;

                    case "file":
                        
                        var model = new FileModel( contents[n].name, contents[n].fullpath, contents[n].mime);

                        model.on("data", function(content) {  that.dispatch("data", content); });

                        that.contents.push( model );

                        break;
                }
            }
        });
    }

    // events

    this.events   = [];

    this.on       = function (eventname, callback) {

        this.events.push({eventname:eventname, callback:callback});

    }

    this.dispatch = function (eventname, data) {

        for(var n in this.events) {

            if (this.events[n].eventname == eventname) {

                this.events[n].callback(data);
            }
        }
    }
}

//----------------------------------------------------------------
// Folder Model
//----------------------------------------------------------------
var FolderModel = function(name, path) 
{    
    this.type     = ko.observable('folder');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.expanded = ko.observable(false);

    this.contents = ko.observableArray([]);            
    
    this.toggle   = function()
    {
        this.expanded( !this.expanded() )

        if (this.expanded()) 
        {
            this.load();
        }
    }

    this.load     = function()
    {   
        var that = this;
        
        calcium.api.get("/storage" + this.path(), function(contents) {
            
            contents = Enumerable.From              (contents)
                                 .OrderByDescending (function (n) { return n.type })
                                 .ThenBy            (function (n) { return n.name })
                                 .ToArray           ();
            
            that.contents([]);

            for(var n in contents) 
            {
                switch( contents[n].type )
                {
                    case "storage":

                        var model = new StorageModel( contents[n].name, contents[n].fullpath);

                        model.on("data", function(content) {  that.dispatch("data", content); });
                        
                        that.contents.push( model );

                        break;

                    case "folder":
                         
                        var model = new FolderModel( contents[n].name, contents[n].fullpath);

                        model.on("data", function(content) {  that.dispatch("data", content); });
                        
                        that.contents.push( model );

                        break;

                    case "file":
                        
                        var model = new FileModel( contents[n].name, contents[n].fullpath, contents[n].mime);

                        model.on("data", function(content) {  that.dispatch("data", content); });

                        that.contents.push( model );

                        break;
                }
            }
        });
    }

    // events

    this.events   = [];

    this.on       = function (eventname, callback) {

        this.events.push({eventname:eventname, callback:callback});
    }

    this.dispatch = function (eventname, data) {

        for(var n in this.events) {

            if (this.events[n].eventname == eventname) {

                this.events[n].callback(data);
            }
        }
    }
}
//----------------------------------------------------------------
// File Model
//----------------------------------------------------------------
var FileModel = function(name, path, mime) 
{    
    this.type     = ko.observable('file');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.mime     = ko.observable(mime);

    this.load     = function()
    {
        var that = this;

        calcium.api.load("/storage" + this.path(), function(content) {

            that.dispatch("data", content);
        });
    }

    // events

    this.events = [];

    this.on = function (eventname, callback) {

        this.events.push({eventname:eventname, callback:callback});

    }

    this.dispatch = function (eventname, data) {

        for(var n in this.events) {

            if (this.events[n].eventname == eventname) {

                this.events[n].callback(data);
            }
        }
    }
}