//----------------------------------------------------------------
// Storage Model
//----------------------------------------------------------------
var StorageModel = function(name, path) 
{    
    this.type     = ko.observable('storage');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.expanded = ko.observable(false);

    this.contents = ko.observableArray([]);            
            
    this.toggle   = function()
    {
        this.expanded( !this.expanded() )

        if (this.expanded()) 
        {
            this.load();
        }
    }

    this.load = function()
    {   
        var that = this;
        
        calcium.api.get("/storage" + this.path(), function(contents) {
            
            contents = Enumerable.From              (contents)
                                 .OrderByDescending (function (n) { return n.type })
                                 .ThenBy            (function (n) { return n.name })
                                 .ToArray           ();
            
            that.contents([]);

            for(var n in contents) 
            {
                switch( contents[n].type )
                {
                    case "storage":

                        var name = contents[n].name;

                        var path = contents[n].fullpath;

                        that.contents.push( new StorageModel(name, path) );

                        break;

                    case "folder":
                         
                        var name = contents[n].name;

                        var path = contents[n].fullpath;
                        
                        that.contents.push( new FolderModel(name, path) );

                        break;

                    case "file":
                                
                        var name = contents[n].name;

                        var path = contents[n].fullpath;

                        var mime = contents[n].mime;

                        that.contents.push( new FileModel(name, path, mime) );

                        break;
                }
            }
        });
    }
}

//----------------------------------------------------------------
// Folder Model
//----------------------------------------------------------------
var FolderModel = function(name, path) 
{    
    this.type     = ko.observable('folder');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.expanded = ko.observable(false);

    this.contents = ko.observableArray([]);            
            
    this.toggle   = function()
    {
        this.expanded( !this.expanded() )

        if (this.expanded()) 
        {
            this.load();
        }
    }

    this.load = function()
    {   
        var that = this;
        
        calcium.api.get("/storage" + this.path(), function(contents) {
            
            contents = Enumerable.From              (contents)
                                 .OrderByDescending (function (n) { return n.type })
                                 .ThenBy            (function (n) { return n.name })
                                 .ToArray           ();
            
            that.contents([]);

            for(var n in contents) 
            {
                switch( contents[n].type )
                {
                    case "storage":

                        var name = contents[n].name;

                        var path = contents[n].fullpath;

                        that.contents.push( new StorageModel(name, path) );

                        break;

                    case "folder":
                         
                        var name = contents[n].name;

                        var path = contents[n].fullpath;
                        
                        that.contents.push( new FolderModel(name, path) );

                        break;

                    case "file":
                                
                        var name = contents[n].name;

                        var path = contents[n].fullpath;

                        var mime = contents[n].mime;

                        that.contents.push( new FileModel(name, path, mime) );

                        break;
                }
            }
        });
    }
}
//----------------------------------------------------------------
// File Model
//----------------------------------------------------------------
var FileModel = function(name, path, mime) 
{    
    this.type     = ko.observable('file');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.mime     = ko.observable(mime);

    this.text = function()
    {
        return '<i class="icon-file"></i>' + this.name;
    }
}