var FileModel = function(name, path, mime) 
{    
    this.type     = ko.observable('file');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.mime     = ko.observable(mime);

    this.text = function()
    {
        return '<i class="icon-file"></i>' + this.name;
    }
}

var FolderModel = function(name, path) 
{    
    this.type     = ko.observable('folder');

    this.name     = ko.observable(name);

    this.path     = ko.observable(path);

    this.expanded = ko.observable(false);

    this.contents = ko.observableArray([]);            
            
    this.toggle   = function()
    {
        this.expanded( !this.expanded() )
    }

    this.load = function()
    {   
        var that = this;

        calcium.api.get("/storage" + this.path(), function(contents) 
        {
            contents = Enumerable.From    (contents)
                                 .OrderByDescending (function (n) { return n.type })
                                 .ThenBy (function (n) { return n.name })
                                 .ToArray ();


            for(var n in contents) 
            {
                switch( contents[n].type )
                {
                    case "folder":
                            
                        var name = contents[n].name;

                        var path = contents[n].fullpath;
                                
                        var model = new FolderModel(name, path);
                                
                        model.load();

                        that.contents.push( model );

                        break;

                    case "file":
                                
                        var name = contents[n].name;

                        var path = contents[n].fullpath;

                        var mime = contents[n].mime;

                        that.contents.push( new FileModel(name, path, mime) );

                        break;
                }
            }
        });
    }
}