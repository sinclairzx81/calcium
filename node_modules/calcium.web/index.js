var calcium;
(function (calcium) {
    calcium.logging = require('calcium.logging');
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var _fs = require('fs');

        var _http = require('http');

        var _path = require('path');

        var App = (function () {
            function App() {
                var _this = this;
                this.server = _http.createServer(function (request, response) {
                    _this.handler(request, response);
                });

                this.routers = [];
            }
            App.prototype.listen = function (port) {
                this.server.listen(port);
            };

            App.prototype.locate_route = function (request) {
                for (var n in this.routers) {
                    var route = this.routers[n].match(request.method.toUpperCase(), request.url);

                    if (route) {
                        return route;
                    }
                }

                return null;
            };

            App.prototype.handler = function (request, response) {
                var route = this.locate_route(request);

                if (route) {
                    var context = new calcium.web.Context();

                    context.server = this.server;

                    context.routers = this.routers;

                    context.request = request;

                    context.response = response;

                    context.route = route;

                    context.parameter = route.parameter(request.url);

                    route.callback(context);

                    return;
                }

                this.error(404, request, response);
            };

            App.prototype.error = function (code, request, response) {
                response.writeHead(code, { 'content-type': 'text/plain' });

                response.write('route not found');

                response.end();
            };
            return App;
        })();
        web.App = App;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Hub = (function () {
            function Hub() {
            }
            return Hub;
        })();
        web.Hub = Hub;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Error = (function () {
            function Error() {
            }
            return Error;
        })();
        web.Error = Error;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Context = (function () {
            function Context() {
            }
            return Context;
        })();
        web.Context = Context;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Route = (function () {
            function Route(path, method, callback) {
                this.path = path;

                this.method = method;

                this.callback = callback;

                this.middlewares = [];

                this.names = this.loadNames();

                this.regexp = this.loadRegExp();
            }
            Route.prototype.match = function (path) {
                var result = this.regexp.test(path);

                return result;
            };

            Route.prototype.parameter = function (path) {
                var parameter = {};

                var match = this.regexp.exec(path);

                if (match) {
                    var index = 0;

                    for (var n in match) {
                        if (n != '0' && n != 'index' && n != 'input') {
                            parameter[this.names[index]] = match[n];

                            index += 1;
                        }
                    }
                }
                return parameter;
            };

            Route.prototype.loadNames = function () {
                var pattern = /\[(.*?)\]/g;

                var names = [];

                var match = pattern.exec(this.path);

                while (match != null) {
                    names.push(match[1]);

                    match = pattern.exec(this.path);
                }

                return names;
            };

            Route.prototype.loadRegExp = function () {
                var pattern = this.path;

                if (this.names.length == 0) {
                    return new RegExp('^' + pattern + '$');
                }
                for (var n in this.names) {
                    pattern = pattern.replace('\[' + this.names[n] + '\]', '(.*)');
                }
                return new RegExp('^' + pattern + '$');
            };
            return Route;
        })();
        web.Route = Route;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Router = (function () {
            function Router() {
                this.routes = [];
            }
            Router.prototype.match = function (method, path) {
                for (var n in this.routes) {
                    if (this.routes[n].method == method) {
                        if (this.routes[n].match(path)) {
                            return this.routes[n];
                        }
                    }
                }
                return null;
            };

            Router.prototype.get = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "GET", callback));
            };

            Router.prototype.post = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "POST", callback));
            };

            Router.prototype.put = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "PUT", callback));
            };

            Router.prototype.delete = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "DELETE", callback));
            };

            Router.prototype.options = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "OPTIONS", callback));
            };
            return Router;
        })();
        web.Router = Router;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
exports = calcium.web;
module.exports = exports;