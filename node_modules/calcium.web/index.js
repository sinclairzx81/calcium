var calcium;
(function (calcium) {
    (function (web) {
        var _fs = require('fs');

        var _http = require('http');

        var _path = require('path');

        var storage = require('calcium.storage');

        var logging = require('calcium.logging');

        var App = (function () {
            function App() {
                var _this = this;
                this.server = _http.createServer(function (request, response) {
                    _this.handler(request, response);
                });

                this.routers = [];

                this.storage = new storage.mount.Device();
            }
            App.prototype.listen = function (port) {
                this.server.listen(port);
            };

            App.prototype.locate_route = function (request) {
                for (var n in this.routers) {
                    var route = this.routers[n].match(request.method.toUpperCase(), request.url);

                    if (route) {
                        return route;
                    }
                }

                return null;
            };

            App.prototype.handler = function (request, response) {
                var _this = this;
                var route = this.locate_route(request);

                if (route) {
                    var context = new calcium.web.Context();

                    context.server = this.server;

                    context.storage = this.storage;

                    context.request = request;

                    context.response = response;

                    context.route = route;

                    context.parameters = route.parameter(request.url);

                    route.callback(context);

                    return;
                }

                this.storage.exists(request.url, function (exists) {
                    if (exists) {
                        _this.storage.readstream(request.url, function (readstream) {
                            if (!readstream) {
                                _this.error404(request, response);

                                return;
                            }

                            var mime = storage.util.Mime.fromfilename(request.url);

                            response.writeHead(200, { 'content-type': mime });

                            readstream.pipe(response);
                        });
                    } else {
                        _this.error404(request, response);
                    }
                });
            };

            App.prototype.error404 = function (request, response) {
                response.writeHead(404, { 'content-type': 'text/plain' });

                response.write('route not found');

                response.end();
            };
            return App;
        })();
        web.App = App;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Response = (function () {
            function Response() {
            }
            Response.from_response = function (response, callback) {
                var buffer = [];

                response.setEncoding('utf8');

                response.on('data', function (chunk) {
                    buffer.push(chunk.toString());
                });

                response.on('end', function () {
                    var result = new calcium.web.Response();

                    result.headers = response.headers;

                    result.body = buffer.join('');

                    callback(result);
                });

                response.on("error", function (error) {
                    var result = new calcium.web.Response();

                    result.headers = {};

                    result.error = error.toString();

                    callback(result);
                });
            };
            return Response;
        })();
        web.Response = Response;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var _http = require('http');

        var _https = require('https');

        var _url = require('url');

        var Request = (function () {
            function Request(url) {
                var options = _url.parse(url);

                this.protocol = options.protocol;

                this.host = options.host;

                this.hostname = options.hostname;

                this.port = options.port ? parseInt(options.port) : 80;

                this.method = "GET";

                this.path = options.pathname;

                this.auth = options.auth;

                this.query = options.query;

                this.hash = options.hash;

                this.headers = {};

                this.postdata = null;
            }
            Request.prototype.get = function (callback) {
                this.method = "GET";

                this.request(callback);
            };

            Request.prototype.post = function (postdata, callback) {
                this.method = "POST";

                this.postdata = postdata;

                this.request(callback);
            };

            Request.prototype.delete = function (postdata, callback) {
                this.method = "DELETE";

                this.postdata = postdata;

                this.request(callback);
            };

            Request.prototype.put = function (postdata, callback) {
                this.method = "PUT";

                this.postdata = postdata;

                this.request(callback);
            };

            Request.prototype.request = function (callback) {
                var options = {
                    host: this.host,
                    hostname: this.hostname,
                    port: this.port,
                    method: this.method,
                    path: [this.path, this.query].join(''),
                    auth: this.auth,
                    headers: this.headers
                };

                var _request = _http.request;

                if (this.protocol == "https") {
                    _request = _https.request;
                }

                var request = _request(options, function (response) {
                    calcium.web.Response.from_response(response, function (response) {
                        callback(response);
                    });
                });

                if (this.method == "GET") {
                    request.end();
                } else {
                    if (this.postdata) {
                        request.write(this.postdata);

                        request.end();
                    }
                }
            };
            return Request;
        })();
        web.Request = Request;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Route = (function () {
            function Route(path, method, callback) {
                this.path = path;

                this.method = method;

                this.callback = callback;

                this.names = this.loadNames();

                this.regexp = this.loadRegExp();
            }
            Route.prototype.match = function (path) {
                var result = this.regexp.test(path);

                this.regexp.test('');

                return result;
            };

            Route.prototype.parameter = function (path) {
                var parameter = {};

                var match = this.regexp.exec(path);

                if (match) {
                    var index = 0;

                    for (var n in match) {
                        if (n != '0' && n != 'index' && n != 'input') {
                            parameter[this.names[index]] = match[n];

                            index += 1;
                        }
                    }
                }
                return parameter;
            };

            Route.prototype.loadNames = function () {
                var pattern = /\[(.*?)\]/g;

                var names = [];

                var match = pattern.exec(this.path);

                while (match != null) {
                    names.push(match[1]);

                    match = pattern.exec(this.path);
                }

                return names;
            };

            Route.prototype.loadRegExp = function () {
                var pattern = this.path;

                if (this.names.length == 0) {
                    return new RegExp('^' + pattern + '$');
                }
                for (var n in this.names) {
                    pattern = pattern.replace('\[' + this.names[n] + '\]', '(.*)');
                }
                return new RegExp('^' + pattern + '$', 'g');
            };
            return Route;
        })();
        web.Route = Route;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Context = (function () {
            function Context() {
            }
            return Context;
        })();
        web.Context = Context;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
var calcium;
(function (calcium) {
    (function (web) {
        var Router = (function () {
            function Router() {
                this.routes = [];
            }
            Router.prototype.match = function (method, path) {
                for (var n in this.routes) {
                    if (this.routes[n].method == method) {
                        if (this.routes[n].match(path)) {
                            return this.routes[n];
                        }
                    }
                }
                return null;
            };

            Router.prototype.get = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "GET", callback));
            };

            Router.prototype.post = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "POST", callback));
            };

            Router.prototype.put = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "PUT", callback));
            };

            Router.prototype.delete = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "DELETE", callback));
            };

            Router.prototype.options = function (path, callback) {
                this.routes.push(new calcium.web.Route(path, "OPTIONS", callback));
            };
            return Router;
        })();
        web.Router = Router;
    })(calcium.web || (calcium.web = {}));
    var web = calcium.web;
})(calcium || (calcium = {}));
exports = calcium.web;
module.exports = exports;