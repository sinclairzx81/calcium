/// <reference path="decl/node.d.ts" />
/// <reference path="decl/calcium.storage.d.ts" />
/// <reference path="decl/calcium.logging.d.ts" />
/// <reference path="Route.ts" />
/// <reference path="Router.ts" />
/// <reference path="Context.ts" />
/// <reference path="Request.ts" />
/// <reference path="Response.ts" />

module calcium.web 
{
    var _fs      = <fs>require('fs');

    var _http    = <http>require('http');
    
    var _path    = <path>require('path');
            
    var storage  = <calcium.storage>require('calcium.storage');

    var logging  = <calcium.logging>require('calcium.logging');

    export class App
    {
        public server     : http.Server;
        
        public routers    : calcium.web.Router[];

        public storage    : calcium.storage.IDevice;

        constructor() 
        {    
            this.server     = _http.createServer((request, response) => { this.handler(request, response); });

            this.routers    = [];

            this.storage    = new storage.mount.Device(); 
        }
        
        public listen(port:number): void 
        {
            this.server.listen(port);
        }
        
        private locate_route(request:http.ServerRequest): calcium.web.Route {
        
            for(var n in this.routers)
            {
                 var route = this.routers[n].match(request.method.toUpperCase(), request.url);
                 
                 if(route) 
                 {
                    return route;
                 }
            }

            return null;
        }
        
        // default http handler...

        private handler(request:http.ServerRequest, response:http.ServerResponse) : void 
        {    
            // check the routes first..
            var route = this.locate_route(request);
            
            if(route) 
            {
                var context        = new calcium.web.Context();
                
                context.server     = this.server;
                
                context.storage    = this.storage;

                context.request    = request;
                
                context.response   = response;
                
                context.route      = route;
                                
                context.parameters = route.parameter(request.url);
                
                route.callback(context);
                
                return;   
            }

            // not a route, maybe its in storage..
            this.storage.exists(request.url, (exists) => {
                
                if(exists) 
                {
                    this.storage.readstream(request.url, (readstream) => 
                    {
                        if(!readstream) 
                        {
                            this.error404(request, response);

                            return;
                        }

                        var mime = storage.util.Mime.fromfilename(request.url);

                        response.writeHead(200, {'content-type' : mime});
                        
                        readstream.pipe(response);

                    });
                } 
                else 
                {
                    this.error404(request, response);
                }
            });
        }

        private error404(request:http.ServerRequest, response:http.ServerResponse) : void {
        
            response.writeHead(404, {'content-type' : 'text/plain'});

            response.write('route not found');

            response.end();    
        }
    }
}
