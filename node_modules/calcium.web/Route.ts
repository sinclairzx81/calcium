/// <reference path="Context.ts" />

module calcium.web 
{
    export class Route 
    {
        public path     : string;  
        
        public method   : string;   
        
        public names    : string[]; 
        
        public regexp   : RegExp;

        public callback : (app:calcium.web.Context) => void; 
        
        constructor(path:string, method:string, callback:(app:calcium.web.Context) => void) 
        {
            this.path     = path;
            
            this.method   = method;
            
            this.callback = callback;

            this.names    = this.loadNames();
            
            this.regexp   = this.loadRegExp();
        }
        
        public match(path:string) : boolean  
        {
            var result = this.regexp.test(path);
            
            return result;
        }

        public parameter(path:string) : any  
        {
            var parameter:any = {};

            var match = this.regexp.exec(path);
            
            if(match) 
            {
                var index = 0;

                for(var n in match) 
                {
                    if(n != '0' && n != 'index' && n != 'input') 
                    {
                        parameter[this.names[index]] = match[n];

                        index += 1;
                    }
                }
            }
            return parameter;
        }

        private loadNames() : string[] 
        {
            var pattern = /\[(.*?)\]/g;

            var names   = [];
            
            var match = pattern.exec(this.path);
            
            while (match != null) 
            {
                names.push(match[1]);

                match = pattern.exec(this.path);
            }
            
            return names;
        }  

        private loadRegExp() : RegExp 
        {
            var pattern = this.path;

            if(this.names.length == 0) 
            {
                return new RegExp('^' + pattern + '$');
            }
            for(var n in this.names) 
            {
                pattern = pattern.replace('\[' + this.names[n] + '\]', '(.*)');
            }
            return new RegExp('^' + pattern + '$' );
        }
    }
}
