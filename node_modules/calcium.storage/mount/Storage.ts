/// <reference path="../util/Path.ts" />
/// <reference path="../Storage.ts" />

module calcium.storage.mount
{
    export class Device implements calcium.storage.Storage
    {
        private devices:calcium.storage.Storage[];

        constructor()
        {
            this.devices = [];
        }
        
        public push (logicalName:string, device : calcium.storage.Storage) : void
        {
            this.devices[logicalName] = device;
        }

        public exists (path:string, callback:(exists:boolean) => void): void  
        {
            var tokens = calcium.storage.util.path.tokenize(path);
            
            if (tokens.length == 0)  
            {
                for(var n in this.devices)
                {
                    if(n == tokens[0])
                    {
                        callback(true);

                        return;
                    }
                }

                callback(false);

                return;
            }

            for(var n in this.devices)
            {
                if(n == tokens[0])
                {
                     var device = this.devices[tokens[0]];

                     var device_path = calcium.storage.util.path.trimbase(path);

                     device.exists(device_path, callback);

                     return;
                }
            }
            
            callback(false);
        }

        public createfolder         (path:string, callback:(success:boolean) => void): void 
        {
            var device = this.GetDevice(path);

            if (device != null)
            {
                var device_path = this.GetDevicePath(path);

                device.createfolder(device_path, callback); 

                return;
            }

            callback(false);
        }

        public delete               (path:string, callback:(success:boolean) => void): void 
        {
            var device = this.GetDevice(path);

            if (device != null)
            {
                var device_path = this.GetDevicePath(path);

                device.delete(device_path, callback); 

                return;
            }

            callback(false);
        }

        public readfolder           (path:string, callback:{ ( objects : calcium.storage.StorageObject[] ):void; } ): void  
        {
            
            

            if(path.trim() === "/") 
            {
                var result:calcium.storage.StorageObject[] = [];

                for(var n in this.devices)
                {
                    var storage_object = new StorageObject();

                    storage_object.type = "device";

                    storage_object.fullpath = "/" + n;

                    storage_object.name = n;

                    storage_object.timestamp = null;

                    result.push(storage_object);                        
                }

                callback(result);
            }
            else 
            {
                var device = this.GetDevice(path);

                if (device != null)
                {
                    var device_path = this.GetDevicePath(path);

                    device.readfolder(device_path, (objects) => 
                    {
                        var tokens = calcium.storage.util.path.tokenize(path);

                        var logicalName = tokens[0];

                        for(var n in objects) 
                        {
                            objects[n].fullpath = calcium.storage.util.path.join([logicalName, objects[n].fullpath]);
                        }

                        callback(objects);

                    }); 

                    return;
                }

                callback([]);
            }
        }
        
        public readstream (path:string, callback:{(stream:stream.ReadableStream):void;}): void
        {
            var device = this.GetDevice(path);

            if (device != null)
            {
                var device_path = this.GetDevicePath(path);
                
                device.readstream(device_path, callback); 

                return;
            }

            callback(null);
        }

        public writestream (path:string, callback:{(stream:stream.WritableStream):void;}): void
        {
            var device = this.GetDevice(path);
            
            if (device != null)
            {
                var device_path = this.GetDevicePath(path);

                device.writestream(device_path, callback); 

                return;
            }

            callback(null);
        }

        private GetDevicePath(path:string) : string 
        {
            return calcium.storage.util.path.trimbase(path);
        }

        private GetDevice(path:string) : calcium.storage.Storage 
        {
            var tokens = calcium.storage.util.path.tokenize(path);

            if(tokens.length == 0) {
                
                return null;
            }

            return this.devices[tokens[0]];
        }
    }

}