/// <reference path="../decl/references.ts" />
/// <reference path="../util/Path.ts" />
/// <reference path="../util/Mime.ts" />
/// <reference path="../Storage.ts" />
/// <reference path="Connection.ts" />

module calcium.storage.amazon
{
    export class Storage implements calcium.storage.Storage
    {
        private connection  : calcium.storage.amazon.Connection;
        
        private logger      : calcium.logging.ILogger;
        
        private s3          : any;
        
        constructor(connection:calcium.storage.amazon.Connection, logger?:calcium.logging.ILogger)
        {
            this.connection = connection;

            this.logger     = logger;

            if(!this.logger) 
            {
                this.logger = new calcium.logging.NullLogger();
            }

            // amazon s3 api - thanks chilts

            var api:any = <any>require('awssum-amazon-s3');

            this.s3 = new api.S3 
            ({
                'accessKeyId'     : this.connection.accesskey,

                'secretAccessKey' : this.connection.secretkey,
                
                'region'          : this.connection.region
            });
        }

        public exists (path:string, callback:(exists:boolean) => void): void 
        {
            path = calcium.storage.util.path.join([this.connection.basepath, calcium.storage.util.path.normalize(path)]);

            var filepath   : string = this.convert_file_path(path);

            var folderpath : string = this.convert_folder_path(path);

            var options:any =  
            {
                BucketName  : this.connection.bucketname,

                ObjectName  : filepath
            };

            this.s3.GetObjectMetadata(options, (err, data) =>
            { 
                if(data) 
                {
                    callback(true);

                    return;
                }

                var options:any =  
                {
                    BucketName  : this.connection.bucketname,

                    ObjectName  : folderpath
                };

                this.s3.GetObjectMetadata(options, (err, data) =>
                { 
                    if(data) 
                    {
                        callback(true);

                        return;
                    }

                    callback(false);
                });
            }); 
        }

        public createfolder (path:string, callback:(success:boolean) => void ): void 
        {
            path = calcium.storage.util.path.join([this.connection.basepath, calcium.storage.util.path.normalize(path)]);
            
            var folderpath : string = this.convert_folder_path(path);

            var options = {

                BucketName    : this.connection.bucketname,

                ObjectName    : folderpath, 

                ContentLength : 0,

                Body          : ''
            };

            this.s3.PutObject(options, (err, data) => {

                if(data) 
                {
                    callback(true);

                    return;
                }

                callback(false);                 
            });
        }

        public delete (path:string, callback: (success:boolean) => void ): void 
        {
            path = calcium.storage.util.path.join([this.connection.basepath, calcium.storage.util.path.normalize(path)]);

            var filepath   : string = this.convert_file_path(path);

            var folderpath : string = this.convert_folder_path(path);
            
            this.s3.GetObjectMetadata({ BucketName : this.connection.bucketname, ObjectName : filepath }, (err, data) =>
            { 
                if(data) 
                {
                    this.s3.DeleteObject({ BucketName : this.connection.bucketname, ObjectName : filepath }, (err, data) =>
                    { 
                        callback(true);
                    });

                    return;
                }

                this.s3.GetObjectMetadata({ BucketName : this.connection.bucketname, ObjectName : folderpath }, (err, data) =>
                { 
                    if(data) 
                    {
                        this.s3.DeleteObject({ BucketName : this.connection.bucketname, ObjectName : folderpath }, (err, data) =>
                        { 
                            callback(true);
                        });

                        return;
                    }

                    callback(false);
                });
            });
        }

        public readfolder          (path:string, callback:( objects : calcium.storage.StorageObject[] ) => void ): void  
        {
            var stored_path : string = path;

            path = calcium.storage.util.path.join([this.connection.basepath, calcium.storage.util.path.normalize(path)]);

            path = this.convert_folder_path(path);

            var options:any = 
            {
                BucketName  : this.connection.bucketname,

                Prefix      : path,

                Delimiter   : "/"
            };
            
            this.s3.ListObjects(options, (err, data) => 
            {
                var objects : calcium.storage.StorageObject[] = [];

                if(data) 
                {
                    // folders
                    if(data.Body.ListBucketResult.CommonPrefixes)
                    {
                        for(var n in data.Body.ListBucketResult.CommonPrefixes)
                        {
                            var folder     : string = data.Body.ListBucketResult.CommonPrefixes.Prefix;
                            

                            var folderpath : string = calcium.storage.util.path.removebasepath(this.connection.basepath, calcium.storage.util.path.normalize(folder));
                            
                            var device_object       = new calcium.storage.StorageObject();

                            device_object.type      = "folder";

                            device_object.name      = calcium.storage.util.path.basename(folderpath);

                            device_object.fullpath  = folderpath;

                            device_object.timestamp = null;

                            device_object.mime      = 'application/octet-stream';

                            objects.push(device_object);
                        }
                    }

                    // files
                    if(data.Body.ListBucketResult.Contents)
                    {
                        console.log(data.Body.ListBucketResult.Contents)
                         
                        if( data.Body.ListBucketResult.Contents.Key == null ) // test for a array.
                        {
                            for(var n in data.Body.ListBucketResult.Contents)
                            {    
                                var obj      : any      = data.Body.ListBucketResult.Contents[n];

                                var filepath : string = calcium.storage.util.path.removebasepath(this.connection.basepath, calcium.storage.util.path.normalize(obj.Key));

                                var device_object       = new calcium.storage.StorageObject();

                                device_object.type      = "file";

                                device_object.name      = calcium.storage.util.path.basename(filepath);

                                device_object.fullpath  = filepath;

                                device_object.timestamp = null;

                                device_object.mime      = calcium.storage.util.mime.fromfilename(device_object.name);

                                device_object.size      = obj.Size;

                                objects.push(device_object);
                            }                         
                        }
                        else
                        {
                            var obj      : any      = data.Body.ListBucketResult.Contents;

                            var filepath : string = calcium.storage.util.path.removebasepath(this.connection.basepath, calcium.storage.util.path.normalize(obj.Key));

                            var device_object       = new calcium.storage.StorageObject();

                            device_object.type      = "file";

                            device_object.name      = calcium.storage.util.path.basename(filepath);

                            device_object.fullpath  = filepath;

                            device_object.timestamp = null;

                            device_object.mime      = calcium.storage.util.mime.fromfilename(device_object.name);

                            device_object.size      = obj.Size;

                            objects.push(device_object);                            
                        } 
                    }

                    callback(objects);
                }
            });
        }

        public readstream (path:string, callback:(stream:any) => void): void 
        {
            path = calcium.storage.util.path.join([this.connection.basepath, calcium.storage.util.path.normalize(path) ]);

            var filepath   : string = this.convert_file_path(path);
            
            var options : any = 
            {
                BucketName    : this.connection.bucketname,
                
                ObjectName    : filepath,
            };

            this.s3.GetObject(options, { stream : true }, function(err, data) {
                
                callback(data.Stream);

            });             
        }

        public writestream (path:string, callback:(stream:any) => void): void 
        {
            path = calcium.storage.util.path.join([this.connection.basepath, calcium.storage.util.path.normalize(path)]);

            var filepath : string = this.convert_file_path(path);

            var options = 
            {
                BucketName    : this.connection.bucketname,
                
                ObjectName    : filepath, 

                ContentLength : 0, // important : how to do multipart uploads.

                Body          : null // todo:
            };

            this.s3.PutObject(options, function(err, data) {

                

            });
        }
        
        // device utilities

        private convert_folder_path(path:string) : string
        {
            if (path == null || path.length == 0)
            {
                return '';
            }

            if (path == "/")
            {
                return '';
            }
            if (path[0] == '/')
            {
                return path.substr(1) + "/";
            }

            return path;
        }
        
        private  convert_file_path(path : string) :string
        {
            if (path == null || path.length == 0)
            {
                return '';
            }

            if (path == "/")
            {
                return '';
            }

            if (path[0] == '/')
            {
                return path.substr(1);
            }

            return path;
        }            
    }
}