/// <reference path="../decl/references.ts" />
/// <reference path="../util/Path.ts" />
/// <reference path="../util/Mime.ts" />
/// <reference path="../Device.ts" />
/// <reference path="Connection.ts" />

module calcium.storage.local
{
    var node = 
    {
        fs   : <fs>require('fs'),

        path : <path>require('path')
    };

    var async = <async>require('async');
    
    export class Device implements calcium.storage.IDevice
    {
        private connection:calcium.storage.local.Connection;

        private logger    : calcium.logging.ILogger;

        constructor(connection:calcium.storage.local.Connection, logger?:calcium.logging.ILogger) 
        {
            this.connection = connection;

            this.logger     = logger;

            if(!this.logger) {
            
                this.logger = new calcium.logging.NullLogger();
            }
        }
        
        public exists               (path:string, callback:{(exists:boolean) : void; }): void 
        {
            var device_path = calcium.storage.util.Path.Join([this.connection.basepath, path]);
            
            device_path = node.path.normalize(device_path); 
            
            // fs stat is used internally by node, and supports the interface
            // with a err passed back.
            node.fs.stat(device_path, (err:Error, stats:fs.Stats) => {
                
                if(err) {
                
                    return;
                }
 
                callback(true);
            });  
        }

        public createfolder         (path:string, callback:{(success:boolean) : void; }): void 
        {
            var device_path = calcium.storage.util.Path.Join([this.connection.basepath, path]);

            device_path = node.path.normalize(device_path); 

            node.fs.stat(device_path, (err:Error, stats:fs.Stats) => {
                
                if(err) { // assuming its not there.

                    node.fs.mkdir(device_path, null, (error) => {

                        error ? callback(false) : callback(true);
                    });
                }

                else {

                    callback(true);
                }
            });
        }

        public delete               (path:string, callback:{(success:boolean) : void; }): void  {
            
           var device_path = calcium.storage.util.Path.Join([this.connection.basepath, path]);

           device_path = node.path.normalize(device_path); 
           
           node.fs.stat(device_path, (err:Error, stats:fs.Stats) => {

                if(!err)  {

                    node.fs.stat(device_path, (error, stat) => {

                        if(!error)  {

                            if(stat.isDirectory())  {

                                node.fs.rmdir(device_path, (error) => {

                                    error ? callback(false) : callback(true);
                                });
                            }
                            else  {

                                node.fs.unlink(device_path, (error) => 
                                {
                                    error ? callback(false) : callback(true);
                                });                            
                            }
                        }
                        callback(false);
                    });
                }

                else {

                    callback(true);
                }
            });
        }

        public readfolder           (path:string, callback:{ ( objects : calcium.storage.DeviceObject[] ):void; } ): void  
        {
            var device_path = calcium.storage.util.Path.Join([this.connection.basepath, path]);

            device_path = node.path.normalize(device_path);  
            
            node.fs.readdir(device_path, (error, contents) => {
            
                var parameters = [];

                for(var n in contents) 
                {
                    var device_fullpath   = node.path.join(device_path, contents[n]);

                    var storage_fullpath  = calcium.storage.util.Path.Join([path, contents[n]]);

                    parameters.push ({device_fullpath: device_fullpath, storage_fullpath : storage_fullpath});
                }

                var results:calcium.storage.DeviceObject[] = []

                async.concatSeries(parameters, (parameter, callback:(err:any, success:boolean)=>void)=> {
                    
                    node.fs.stat(parameter.device_fullpath, (err:Error, stat:fs.Stats) => {                        
                    
                        var result = new calcium.storage.DeviceObject();

                        if(stat.isDirectory())  {
                                
                            result.type      = "folder";

                            result.fullpath  = parameter.storage_fullpath;

                            result.name      = calcium.storage.util.Path.Name(result.fullpath);

                            result.size      = 0;

                            result.timestamp = stat.ctime;

                            result.mime      = 'application/octet-stream';
                        }

                        if(stat.isFile()) {

                            result.type     = "file";

                            result.fullpath = parameter.storage_fullpath;

                            result.name     = calcium.storage.util.Path.Name(result.fullpath);

                            result.size     = stat.size;

                            result.timestamp = stat.ctime;

                            result.mime      = calcium.storage.util.Mime.fromfilename(result.name);
                        }                          
                        
                        results.push(result)

                        callback(null, true);

                    });

                }, (errors, data) => {
                    
                    callback(results);

                });
            });
        }

        public readstream  (path:string, callback:{(stream:stream.ReadableStream):void;}): void
        {
            var device_path = calcium.storage.util.Path.Join([this.connection.basepath, path]);

            device_path = node.path.normalize(device_path); 
            
            node.fs.stat(device_path, (err:Error, stats:fs.Stats) => {
            
                if(err) {
                
                    callback(null);

                    return;
                }

                if(stats.isDirectory()) {
                
                    callback(null);

                    return;                    
                }

                var stream = node.fs.createReadStream(device_path);

                callback(stream);
            });
        }

        public writestream  (path:string, callback:{(stream:stream.WritableStream):void;}): void
        {
            var device_path = calcium.storage.util.Path.Join([this.connection.basepath, path]);

            device_path = node.path.normalize(device_path); 

            var stream = node.fs.createWriteStream(device_path); 

            callback(stream);
        }         
    }
}