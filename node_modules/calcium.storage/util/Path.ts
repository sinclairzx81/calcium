module calcium.storage.util
{
    export class Path
    {
        // normalizes a mapdrive path.
        public static Normalize(path : string) : string
        {
            // if null return base.
            if(!path) return "/";

            // if zero length, return base.
            if(path.length == 0) return "/";

            // convert any backslashes into forward slashes.
            path = path.replace(/\\/g,"/");

            // ensure there are no duplicate slashes.
            path = path.replace(/\/\//g, "/" )

            // check for the need to prefix.
            if(!Path.IsAbsoluteUrl(path))
            {
                if(!Path.IsAbsoluteUrn(path))
                {
                    // if not prefixed with slash, add.
                    if(path[0] != '/') 
                    {
                        path = '/' + path;
                    }
                }
            }

            // remove trailing forward slashes.
            if (path[path.length - 1] == '/') 
            {
                path = path.substr(0, path.length - 1);    
            }

            // return the path.
            return path;
        }

        // joins an array of paths.
        public static Join(paths:string[]) : string
        {
            // if the array is null, return base.
            if(!paths) return "/";

            // if path array length is zero, return base.
            if(paths.length == 0) return "/";

            // if only 1 item in array, return that.
            if(paths.length == 1)
            {
                return "/" + paths[0];
            }

            // accumulate tokens
            var tokens = [];

            for(var n in paths) 
            {
                var _tokens = Path.Tokenize(paths[n]);

                for(var m in _tokens)
                {
                    tokens.push(_tokens[m]);
                }
            }
            
            // join tokens..
            var result =  [];

            for(var n in tokens)
            {
                result.push(tokens[n]);
            }
            
            // return normalized path.
            return Path.Normalize( result.join('/') );
        }
        
        // tokenizes a path.
        public static Tokenize(path:string) : string[]
        {
            path = Path.Normalize(path);

            var split = path.split("/");

            var result = [];

            for(var n in split)
            {
                if(split[n].length > 0)
                {
                    result.push(split[n])
                }
            }

            return result;
        }
        // returns the name of the file or folder.
        public static Name(path:string) : string
        {
            var tokens = Path.Tokenize(path);

            if(tokens.length > 0)
            {
                return tokens[tokens.length - 1];
            }

            return '';

        }

        // returns the parent directory of this file or folder.
        public static Parent(path:string) : string 
        {   
            var tokens = Path.Tokenize(path);

            tokens.pop();
            
            return Path.Join(tokens);
            
        }

        // trims the base off a path, /a/b/c becomes /b/c
        public static TrimBase(path:string) : string
        {
            var tokens = Path.Tokenize(path);

            tokens.splice(0, 1)
            
            return Path.Join(tokens);
        }

        // checks to see if this path a absolute url.
        public static IsAbsoluteUrl(path:string) : boolean 
        {
            var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

            return regex.test(path);        
        }

        // checks to see if this path a absolute urn.
        public static IsAbsoluteUrn(path:string) : boolean 
        { 
            var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");

            return regex.test(path);
        }
        
        // case insenstive base path removal.
        public static RemoveBasePath(basePath : string, path : string) : string
        {
            basePath = Path.Normalize(basePath);

            path = Path.Normalize(path);

            var count:number = 0;

            for (var i = 0; i < basePath.length; i++)
            {
                if (i < path.length)
                {
                    var a:string = basePath[i].toString();

                    var b:string = path[i].toString();
                    
                    if (a.toUpperCase() === b.toUpperCase())
                    {
                        count++;
                    }
                }
            }
            if (basePath.length == count)
            {
                return Path.Normalize(path.substr(basePath.length));
            }

            return Path.Normalize(path);
        }

        // has a best guess at detecting if the path is to a file.
        public static IsFile(path:string) : boolean
        {
            var tokens = calcium.storage.util.Path.Tokenize(path);

            if(tokens.length > 0)
            {
                var last = tokens[tokens.length - 1];
            
                if(last.indexOf('.') != -1)
                {
                    return true;
                }
            }

            return false;
        }        
    }
}