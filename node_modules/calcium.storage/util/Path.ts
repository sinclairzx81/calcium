module calcium.storage.util
{
    export class path
    {
        // normalizes a mapdrive path.
        public static normalize(filepath : string) : string
        {
            // if null return base.
            if(!filepath) return "/";

            // if zero length, return base.
            if(filepath.length == 0) return "/";

            // convert any backslashes into forward slashes.
            filepath = filepath.replace(/\\/g,"/");

            // ensure there are no duplicate slashes.
            filepath = filepath.replace(/\/\//g, "/" )

            // check for the need to prefix.
            if(!calcium.storage.util.path.isurl(filepath))
            {
                if(!calcium.storage.util.path.isurn(filepath))
                {
                    // if not prefixed with slash, add.
                    if(filepath[0] != '/') 
                    {
                        filepath = '/' + filepath;
                    }
                }
            }

            // remove trailing forward slashes.
            if (filepath[filepath.length - 1] == '/') 
            {
                filepath = filepath.substr(0, filepath.length - 1);    
            }

            // return the path.
            return filepath;
        }

        // joins an array of paths.
        public static join(filepaths:string[]) : string
        {
            // if the array is null, return base.
            if(!filepaths) return "/";

            // if path array length is zero, return base.
            if(filepaths.length == 0) return "/";

            // if only 1 item in array, return that.
            if(filepaths.length == 1)
            {
                return "/" + filepaths[0];
            }

            // accumulate tokens
            var tokens = [];

            for(var n in filepaths) 
            {
                var _tokens = calcium.storage.util.path.tokenize(filepaths[n]);

                for(var m in _tokens)
                {
                    tokens.push(_tokens[m]);
                }
            }
            
            // join tokens..
            var result =  [];

            for(var n in tokens)
            {
                result.push(tokens[n]);
            }
            
            // return normalized path.
            return calcium.storage.util.path.normalize( result.join('/') );
        }
        
        // tokenizes a path.
        public static tokenize(filepath:string) : string[]
        {
            filepath = calcium.storage.util.path.normalize(filepath);

            var split = filepath.split("/");

            var result = [];

            for(var n in split)
            {
                if(split[n].length > 0)
                {
                    result.push(split[n])
                }
            }

            return result;
        }
        // returns the name of the file or folder.
        public static basename(filepath:string) : string
        {
            var tokens = calcium.storage.util.path.tokenize(filepath);

            if(tokens.length > 0)
            {
                return tokens[tokens.length - 1];
            }

            return '';

        }

        // returns the parent directory of this file or folder.
        public static parent(filepath:string) : string 
        {   
            var tokens = calcium.storage.util.path.tokenize(filepath);

            tokens.pop();
            
            return calcium.storage.util.path.join(tokens);
            
        }

        // trims the base off a path, /a/b/c becomes /b/c
        public static trimbase(filepath:string) : string
        {
            var tokens = calcium.storage.util.path.tokenize(filepath);

            tokens.splice(0, 1)
            
            return calcium.storage.util.path.join(tokens);
        }
        
        // case insenstive base path removal.
        public static removebasepath(basepath : string, filepath : string) : string
        {
            basepath = calcium.storage.util.path.normalize(basepath);

            filepath = calcium.storage.util.path.normalize(filepath);

            var count:number = 0;

            for (var i = 0; i < basepath.length; i++)
            {
                if (i < filepath.length)
                {
                    var a:string = basepath[i].toString();

                    var b:string = filepath[i].toString();
                    
                    if (a.toUpperCase() === b.toUpperCase())
                    {
                        count++;
                    }
                }
            }
            if (basepath.length == count)
            {
                return calcium.storage.util.path.normalize(filepath.substr(basepath.length));
            }

            return calcium.storage.util.path.normalize(filepath);
        }

        // checks to see if this path a absolute url.
        public static isurl(filepath:string) : boolean 
        {
            var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

            return regex.test(filepath);        
        }

        // checks to see if this path a absolute urn.
        public static isurn(filepath:string) : boolean 
        { 
            var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");

            return regex.test(filepath);
        }
        // has a best guess at detecting if the path is to a file.
        public static isfile(filepath:string) : boolean
        {
            var tokens = calcium.storage.util.path.tokenize(filepath);

            if(tokens.length > 0)
            {
                var last = tokens[tokens.length - 1];
            
                if(last.indexOf('.') != -1)
                {
                    return true;
                }
            }

            return false;
        }        
    }
}